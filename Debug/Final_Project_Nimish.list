
Final_Project_Nimish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fdc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800209c  0800209c  0000309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800226c  0800226c  00004078  2**0
                  CONTENTS
  4 .ARM          00000000  0800226c  0800226c  00004078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800226c  0800226c  00004078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800226c  0800226c  0000326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002270  08002270  00003270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08002274  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000078  080022ec  00004078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080022ec  00004244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025f3  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ef7  00000000  00000000  00006693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  0000758a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001f2  00000000  00000000  00007852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f8f  00000000  00000000  00007a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004bb7  00000000  00000000  0001c9d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068d4f  00000000  00000000  0002158a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0008a2d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f4c  00000000  00000000  0008a360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002084 	.word	0x08002084

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08002084 	.word	0x08002084

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	@ 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <uart2_tx_char>:

// Global mode flag (real or test) and active flag
data_mode_t current_mode = MODE_REAL;
bool systemActive = false;

static void uart2_tx_char(char c) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	0002      	movs	r2, r0
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	701a      	strb	r2, [r3, #0]
    while (!(USART2->ISR & USART_ISR_TXE));
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	4b07      	ldr	r3, [pc, #28]	@ (8000274 <uart2_tx_char+0x2c>)
 8000258:	69db      	ldr	r3, [r3, #28]
 800025a:	2280      	movs	r2, #128	@ 0x80
 800025c:	4013      	ands	r3, r2
 800025e:	d0fa      	beq.n	8000256 <uart2_tx_char+0xe>
    USART2->TDR = (uint8_t)c;
 8000260:	4a04      	ldr	r2, [pc, #16]	@ (8000274 <uart2_tx_char+0x2c>)
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	b29b      	uxth	r3, r3
 8000268:	8513      	strh	r3, [r2, #40]	@ 0x28
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)
 8000274:	40004400 	.word	0x40004400

08000278 <uart2_tx_str>:

static void uart2_tx_str(const char *s) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
    while (*s) uart2_tx_char(*s++);
 8000280:	e006      	b.n	8000290 <uart2_tx_str+0x18>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	607a      	str	r2, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	0018      	movs	r0, r3
 800028c:	f7ff ffdc 	bl	8000248 <uart2_tx_char>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d1f4      	bne.n	8000282 <uart2_tx_str+0xa>
}
 8000298:	46c0      	nop			@ (mov r8, r8)
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	b002      	add	sp, #8
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <uart2_prompt>:
// print the prompt
static void uart2_prompt(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
   uart2_tx_str(">> ");
 80002a8:	4b03      	ldr	r3, [pc, #12]	@ (80002b8 <uart2_prompt+0x14>)
 80002aa:	0018      	movs	r0, r3
 80002ac:	f7ff ffe4 	bl	8000278 <uart2_tx_str>
}
 80002b0:	46c0      	nop			@ (mov r8, r8)
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	0800209c 	.word	0x0800209c

080002bc <process_command>:

// Process a complete command string
static void process_command(const char *cmd) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
    if (strcmp(cmd, "start") == 0) {
 80002c4:	4a18      	ldr	r2, [pc, #96]	@ (8000328 <process_command+0x6c>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	0011      	movs	r1, r2
 80002ca:	0018      	movs	r0, r3
 80002cc:	f7ff ff1c 	bl	8000108 <strcmp>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d10c      	bne.n	80002ee <process_command+0x32>
    	uart2_tx_str("RUNNING WITH DHT READINGS \r\n");
 80002d4:	4b15      	ldr	r3, [pc, #84]	@ (800032c <process_command+0x70>)
 80002d6:	0018      	movs	r0, r3
 80002d8:	f7ff ffce 	bl	8000278 <uart2_tx_str>
        // Start in real sensor mode
        current_mode = MODE_REAL;
 80002dc:	4b14      	ldr	r3, [pc, #80]	@ (8000330 <process_command+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
        systemActive = true;
 80002e2:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <process_command+0x78>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	701a      	strb	r2, [r3, #0]
        state_machine_init();  // reset LED and state
 80002e8:	f000 fb74 	bl	80009d4 <state_machine_init>
    }
    else{
    	 uart2_tx_str("UNKNOWN COMMAND \r\n");
    }

}
 80002ec:	e018      	b.n	8000320 <process_command+0x64>
    else if (strcmp(cmd, "test") == 0) {
 80002ee:	4a12      	ldr	r2, [pc, #72]	@ (8000338 <process_command+0x7c>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	0011      	movs	r1, r2
 80002f4:	0018      	movs	r0, r3
 80002f6:	f7ff ff07 	bl	8000108 <strcmp>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d10c      	bne.n	8000318 <process_command+0x5c>
        uart2_tx_str("RUNNING THE AUTOMATED TESTCASE\r\n");
 80002fe:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <process_command+0x80>)
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ffb9 	bl	8000278 <uart2_tx_str>
        current_mode = MODE_TEST;
 8000306:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <process_command+0x74>)
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
        systemActive = true;
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <process_command+0x78>)
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
        state_machine_init();  // reset LED and state
 8000312:	f000 fb5f 	bl	80009d4 <state_machine_init>
}
 8000316:	e003      	b.n	8000320 <process_command+0x64>
    	 uart2_tx_str("UNKNOWN COMMAND \r\n");
 8000318:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <process_command+0x84>)
 800031a:	0018      	movs	r0, r3
 800031c:	f7ff ffac 	bl	8000278 <uart2_tx_str>
}
 8000320:	46c0      	nop			@ (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b002      	add	sp, #8
 8000326:	bd80      	pop	{r7, pc}
 8000328:	080020a0 	.word	0x080020a0
 800032c:	080020a8 	.word	0x080020a8
 8000330:	200000d5 	.word	0x200000d5
 8000334:	200000d6 	.word	0x200000d6
 8000338:	080020c8 	.word	0x080020c8
 800033c:	080020d0 	.word	0x080020d0
 8000340:	080020f4 	.word	0x080020f4

08000344 <command_processor_init>:

void command_processor_init(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    cmd_index = 0;
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <command_processor_init+0x20>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
    memset(cmd_buffer, 0, CMD_BUF_SIZE);
 800034e:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <command_processor_init+0x24>)
 8000350:	2240      	movs	r2, #64	@ 0x40
 8000352:	2100      	movs	r1, #0
 8000354:	0018      	movs	r0, r3
 8000356:	f001 f809 	bl	800136c <memset>
    uart2_prompt();
 800035a:	f7ff ffa3 	bl	80002a4 <uart2_prompt>
}
 800035e:	46c0      	nop			@ (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200000d4 	.word	0x200000d4
 8000368:	20000094 	.word	0x20000094

0800036c <command_processor_run>:

void command_processor_run(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
    // Check if a character was received on UART2
    if (USART2->ISR & USART_ISR_RXNE) {
 8000372:	4b20      	ldr	r3, [pc, #128]	@ (80003f4 <command_processor_run+0x88>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	2220      	movs	r2, #32
 8000378:	4013      	ands	r3, r2
 800037a:	d037      	beq.n	80003ec <command_processor_run+0x80>
        char ch = (char)USART2->RDR;
 800037c:	4b1d      	ldr	r3, [pc, #116]	@ (80003f4 <command_processor_run+0x88>)
 800037e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000380:	b29a      	uxth	r2, r3
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	701a      	strb	r2, [r3, #0]
        uart2_tx_char( ch); // to print the string on serial monitor with local echo off.
 8000386:	1dfb      	adds	r3, r7, #7
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	0018      	movs	r0, r3
 800038c:	f7ff ff5c 	bl	8000248 <uart2_tx_char>
        if (ch == '\r' || ch == '\n') {
 8000390:	1dfb      	adds	r3, r7, #7
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b0d      	cmp	r3, #13
 8000396:	d003      	beq.n	80003a0 <command_processor_run+0x34>
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b0a      	cmp	r3, #10
 800039e:	d111      	bne.n	80003c4 <command_processor_run+0x58>
            if (cmd_index) {
 80003a0:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <command_processor_run+0x8c>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d021      	beq.n	80003ec <command_processor_run+0x80>
                cmd_buffer[cmd_index] = '\0';
 80003a8:	4b13      	ldr	r3, [pc, #76]	@ (80003f8 <command_processor_run+0x8c>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	001a      	movs	r2, r3
 80003ae:	4b13      	ldr	r3, [pc, #76]	@ (80003fc <command_processor_run+0x90>)
 80003b0:	2100      	movs	r1, #0
 80003b2:	5499      	strb	r1, [r3, r2]
                process_command(cmd_buffer);
 80003b4:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <command_processor_run+0x90>)
 80003b6:	0018      	movs	r0, r3
 80003b8:	f7ff ff80 	bl	80002bc <process_command>
                cmd_index = 0;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <command_processor_run+0x8c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
            if (cmd_index) {
 80003c2:	e013      	b.n	80003ec <command_processor_run+0x80>
            }
        }
        else if (cmd_index < CMD_BUF_SIZE - 1) {
 80003c4:	4b0c      	ldr	r3, [pc, #48]	@ (80003f8 <command_processor_run+0x8c>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80003ca:	d80b      	bhi.n	80003e4 <command_processor_run+0x78>
            // Append character to command buffer
            cmd_buffer[cmd_index++] = ch;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <command_processor_run+0x8c>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	1c5a      	adds	r2, r3, #1
 80003d2:	b2d1      	uxtb	r1, r2
 80003d4:	4a08      	ldr	r2, [pc, #32]	@ (80003f8 <command_processor_run+0x8c>)
 80003d6:	7011      	strb	r1, [r2, #0]
 80003d8:	0019      	movs	r1, r3
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <command_processor_run+0x90>)
 80003dc:	1dfa      	adds	r2, r7, #7
 80003de:	7812      	ldrb	r2, [r2, #0]
 80003e0:	545a      	strb	r2, [r3, r1]
        else {
            // Buffer overflow, reset
            cmd_index = 0;
        }
    }
}
 80003e2:	e003      	b.n	80003ec <command_processor_run+0x80>
            cmd_index = 0;
 80003e4:	4b04      	ldr	r3, [pc, #16]	@ (80003f8 <command_processor_run+0x8c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
}
 80003ea:	e7ff      	b.n	80003ec <command_processor_run+0x80>
 80003ec:	46c0      	nop			@ (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b002      	add	sp, #8
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40004400 	.word	0x40004400
 80003f8:	200000d4 	.word	0x200000d4
 80003fc:	20000094 	.word	0x20000094

08000400 <delay_us>:
#include <stddef.h>

static TIM_TypeDef *dht_timer = NULL; //Pointer to the hardware timer used for generating microsecond delays

// Microsecond delay using TIM counter
static void delay_us(uint32_t us) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
    dht_timer->CNT = 0;
 8000408:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <delay_us+0x28>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2200      	movs	r2, #0
 800040e:	625a      	str	r2, [r3, #36]	@ 0x24
    while (dht_timer->CNT < us) { }
 8000410:	46c0      	nop			@ (mov r8, r8)
 8000412:	4b05      	ldr	r3, [pc, #20]	@ (8000428 <delay_us+0x28>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	429a      	cmp	r2, r3
 800041c:	d8f9      	bhi.n	8000412 <delay_us+0x12>
}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46c0      	nop			@ (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200000d8 	.word	0x200000d8

0800042c <set_pin_output>:

// Configuring pin as output
static void set_pin_output(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
    DHT11_GPIO_PORT->MODER &= ~DHT11_PIN_MODER_MASK;
 8000430:	2390      	movs	r3, #144	@ 0x90
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	2390      	movs	r3, #144	@ 0x90
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	4907      	ldr	r1, [pc, #28]	@ (8000458 <set_pin_output+0x2c>)
 800043c:	400a      	ands	r2, r1
 800043e:	601a      	str	r2, [r3, #0]
    DHT11_GPIO_PORT->MODER |=  DHT11_PIN_OUTPUT_MODE;
 8000440:	2390      	movs	r3, #144	@ 0x90
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	2390      	movs	r3, #144	@ 0x90
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	2180      	movs	r1, #128	@ 0x80
 800044c:	0149      	lsls	r1, r1, #5
 800044e:	430a      	orrs	r2, r1
 8000450:	601a      	str	r2, [r3, #0]
}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	ffffcfff 	.word	0xffffcfff

0800045c <set_pin_input>:

// Configuring pin as input
static void set_pin_input(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
    DHT11_GPIO_PORT->MODER &= ~DHT11_PIN_MODER_MASK;
 8000460:	2390      	movs	r3, #144	@ 0x90
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	2390      	movs	r3, #144	@ 0x90
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	4903      	ldr	r1, [pc, #12]	@ (8000478 <set_pin_input+0x1c>)
 800046c:	400a      	ands	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
}
 8000470:	46c0      	nop			@ (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	ffffcfff 	.word	0xffffcfff

0800047c <init_dht11>:

void init_dht11(dht11_t *sensor, TIM_TypeDef *timer) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
    (void)sensor;
    dht_timer = timer;
 8000486:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <init_dht11+0x3c>)
 8000488:	683a      	ldr	r2, [r7, #0]
 800048a:	601a      	str	r2, [r3, #0]
    // Enabling GPIOA clock
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <init_dht11+0x40>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <init_dht11+0x40>)
 8000492:	2180      	movs	r1, #128	@ 0x80
 8000494:	0289      	lsls	r1, r1, #10
 8000496:	430a      	orrs	r2, r1
 8000498:	615a      	str	r2, [r3, #20]
    // Ensuring that pin is output and held high
    set_pin_output();
 800049a:	f7ff ffc7 	bl	800042c <set_pin_output>
    DHT11_GPIO_PORT->ODR |= DHT11_PIN_BIT;
 800049e:	2390      	movs	r3, #144	@ 0x90
 80004a0:	05db      	lsls	r3, r3, #23
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2390      	movs	r3, #144	@ 0x90
 80004a6:	05db      	lsls	r3, r3, #23
 80004a8:	2140      	movs	r1, #64	@ 0x40
 80004aa:	430a      	orrs	r2, r1
 80004ac:	615a      	str	r2, [r3, #20]
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	200000d8 	.word	0x200000d8
 80004bc:	40021000 	.word	0x40021000

080004c0 <readDHT11>:

uint8_t readDHT11(dht11_t *sensor) {
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	@ 0x24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    uint32_t count;
    uint8_t bits[5] = {0};
 80004c8:	2308      	movs	r3, #8
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	2200      	movs	r2, #0
 80004d2:	711a      	strb	r2, [r3, #4]

    // Start signal
    set_pin_output();
 80004d4:	f7ff ffaa 	bl	800042c <set_pin_output>
    DHT11_GPIO_PORT->ODR &= ~DHT11_PIN_BIT;
 80004d8:	2390      	movs	r3, #144	@ 0x90
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	2390      	movs	r3, #144	@ 0x90
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	2140      	movs	r1, #64	@ 0x40
 80004e4:	438a      	bics	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
    delay_us(DHT11_START_LOW_US);
 80004e8:	23fa      	movs	r3, #250	@ 0xfa
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f7ff ff87 	bl	8000400 <delay_us>
    DHT11_GPIO_PORT->ODR |=  DHT11_PIN_BIT;
 80004f2:	2390      	movs	r3, #144	@ 0x90
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	2390      	movs	r3, #144	@ 0x90
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2140      	movs	r1, #64	@ 0x40
 80004fe:	430a      	orrs	r2, r1
 8000500:	615a      	str	r2, [r3, #20]
    delay_us(DHT11_START_HIGH_US);
 8000502:	201e      	movs	r0, #30
 8000504:	f7ff ff7c 	bl	8000400 <delay_us>
    set_pin_input();
 8000508:	f7ff ffa8 	bl	800045c <set_pin_input>

    // Sensor response: low, high, then low
    count = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
    while ((DHT11_GPIO_PORT->IDR & DHT11_PIN_BIT) && ++count < DHT11_TIMEOUT_US);
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	2390      	movs	r3, #144	@ 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	691b      	ldr	r3, [r3, #16]
 8000518:	2240      	movs	r2, #64	@ 0x40
 800051a:	4013      	ands	r3, r2
 800051c:	d007      	beq.n	800052e <readDHT11+0x6e>
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	3301      	adds	r3, #1
 8000522:	61fb      	str	r3, [r7, #28]
 8000524:	69fa      	ldr	r2, [r7, #28]
 8000526:	23fa      	movs	r3, #250	@ 0xfa
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	429a      	cmp	r2, r3
 800052c:	d3f1      	bcc.n	8000512 <readDHT11+0x52>
    if (count >= DHT11_TIMEOUT_US) return 0;
 800052e:	69fa      	ldr	r2, [r7, #28]
 8000530:	23fa      	movs	r3, #250	@ 0xfa
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	429a      	cmp	r2, r3
 8000536:	d301      	bcc.n	800053c <readDHT11+0x7c>
 8000538:	2300      	movs	r3, #0
 800053a:	e0f7      	b.n	800072c <readDHT11+0x26c>
    count = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
    while (!(DHT11_GPIO_PORT->IDR & DHT11_PIN_BIT) && ++count < DHT11_TIMEOUT_US);
 8000540:	46c0      	nop			@ (mov r8, r8)
 8000542:	2390      	movs	r3, #144	@ 0x90
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	691b      	ldr	r3, [r3, #16]
 8000548:	2240      	movs	r2, #64	@ 0x40
 800054a:	4013      	ands	r3, r2
 800054c:	d107      	bne.n	800055e <readDHT11+0x9e>
 800054e:	69fb      	ldr	r3, [r7, #28]
 8000550:	3301      	adds	r3, #1
 8000552:	61fb      	str	r3, [r7, #28]
 8000554:	69fa      	ldr	r2, [r7, #28]
 8000556:	23fa      	movs	r3, #250	@ 0xfa
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	429a      	cmp	r2, r3
 800055c:	d3f1      	bcc.n	8000542 <readDHT11+0x82>
    if (count >= DHT11_TIMEOUT_US) return 0;
 800055e:	69fa      	ldr	r2, [r7, #28]
 8000560:	23fa      	movs	r3, #250	@ 0xfa
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	429a      	cmp	r2, r3
 8000566:	d301      	bcc.n	800056c <readDHT11+0xac>
 8000568:	2300      	movs	r3, #0
 800056a:	e0df      	b.n	800072c <readDHT11+0x26c>
    count = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
    while ((DHT11_GPIO_PORT->IDR & DHT11_PIN_BIT) && ++count < DHT11_TIMEOUT_US);
 8000570:	46c0      	nop			@ (mov r8, r8)
 8000572:	2390      	movs	r3, #144	@ 0x90
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	2240      	movs	r2, #64	@ 0x40
 800057a:	4013      	ands	r3, r2
 800057c:	d007      	beq.n	800058e <readDHT11+0xce>
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	3301      	adds	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
 8000584:	69fa      	ldr	r2, [r7, #28]
 8000586:	23fa      	movs	r3, #250	@ 0xfa
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	429a      	cmp	r2, r3
 800058c:	d3f1      	bcc.n	8000572 <readDHT11+0xb2>
    if (count >= DHT11_TIMEOUT_US) return 0;
 800058e:	69fa      	ldr	r2, [r7, #28]
 8000590:	23fa      	movs	r3, #250	@ 0xfa
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	429a      	cmp	r2, r3
 8000596:	d301      	bcc.n	800059c <readDHT11+0xdc>
 8000598:	2300      	movs	r3, #0
 800059a:	e0c7      	b.n	800072c <readDHT11+0x26c>

    // 3) Reading 40 bits
    for (int i = 0; i < 40; i++) {
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	e059      	b.n	8000656 <readDHT11+0x196>
        count = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
        while (!(DHT11_GPIO_PORT->IDR & DHT11_PIN_BIT) && ++count < DHT11_TIMEOUT_US);
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	2390      	movs	r3, #144	@ 0x90
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	2240      	movs	r2, #64	@ 0x40
 80005b0:	4013      	ands	r3, r2
 80005b2:	d107      	bne.n	80005c4 <readDHT11+0x104>
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	3301      	adds	r3, #1
 80005b8:	61fb      	str	r3, [r7, #28]
 80005ba:	69fa      	ldr	r2, [r7, #28]
 80005bc:	23fa      	movs	r3, #250	@ 0xfa
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d3f1      	bcc.n	80005a8 <readDHT11+0xe8>
        if (count >= DHT11_TIMEOUT_US) return 0;
 80005c4:	69fa      	ldr	r2, [r7, #28]
 80005c6:	23fa      	movs	r3, #250	@ 0xfa
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d301      	bcc.n	80005d2 <readDHT11+0x112>
 80005ce:	2300      	movs	r3, #0
 80005d0:	e0ac      	b.n	800072c <readDHT11+0x26c>

        // The length of the HIGH pulse determines 0 or 1
        delay_us(DHT11_START_HIGH_US);
 80005d2:	201e      	movs	r0, #30
 80005d4:	f7ff ff14 	bl	8000400 <delay_us>
        if (DHT11_GPIO_PORT->IDR & DHT11_PIN_BIT) {
 80005d8:	2390      	movs	r3, #144	@ 0x90
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	691b      	ldr	r3, [r3, #16]
 80005de:	2240      	movs	r2, #64	@ 0x40
 80005e0:	4013      	ands	r3, r2
 80005e2:	d01d      	beq.n	8000620 <readDHT11+0x160>
            bits[i / 8] |= (1U << (7 - (i % 8)));
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	da00      	bge.n	80005ec <readDHT11+0x12c>
 80005ea:	3307      	adds	r3, #7
 80005ec:	10db      	asrs	r3, r3, #3
 80005ee:	001a      	movs	r2, r3
 80005f0:	2308      	movs	r3, #8
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	5c99      	ldrb	r1, [r3, r2]
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	484e      	ldr	r0, [pc, #312]	@ (8000734 <readDHT11+0x274>)
 80005fa:	4003      	ands	r3, r0
 80005fc:	d504      	bpl.n	8000608 <readDHT11+0x148>
 80005fe:	3b01      	subs	r3, #1
 8000600:	2008      	movs	r0, #8
 8000602:	4240      	negs	r0, r0
 8000604:	4303      	orrs	r3, r0
 8000606:	3301      	adds	r3, #1
 8000608:	0018      	movs	r0, r3
 800060a:	2307      	movs	r3, #7
 800060c:	1a1b      	subs	r3, r3, r0
 800060e:	2001      	movs	r0, #1
 8000610:	4098      	lsls	r0, r3
 8000612:	0003      	movs	r3, r0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	430b      	orrs	r3, r1
 8000618:	b2d9      	uxtb	r1, r3
 800061a:	2308      	movs	r3, #8
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	5499      	strb	r1, [r3, r2]
        }

        count = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
        while ((DHT11_GPIO_PORT->IDR & DHT11_PIN_BIT) && ++count < DHT11_TIMEOUT_US);
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	2390      	movs	r3, #144	@ 0x90
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	2240      	movs	r2, #64	@ 0x40
 800062e:	4013      	ands	r3, r2
 8000630:	d007      	beq.n	8000642 <readDHT11+0x182>
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	3301      	adds	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
 8000638:	69fa      	ldr	r2, [r7, #28]
 800063a:	23fa      	movs	r3, #250	@ 0xfa
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	429a      	cmp	r2, r3
 8000640:	d3f1      	bcc.n	8000626 <readDHT11+0x166>
        if (count >= DHT11_TIMEOUT_US) return 0;
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	23fa      	movs	r3, #250	@ 0xfa
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	429a      	cmp	r2, r3
 800064a:	d301      	bcc.n	8000650 <readDHT11+0x190>
 800064c:	2300      	movs	r3, #0
 800064e:	e06d      	b.n	800072c <readDHT11+0x26c>
    for (int i = 0; i < 40; i++) {
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	3301      	adds	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	2b27      	cmp	r3, #39	@ 0x27
 800065a:	dda2      	ble.n	80005a2 <readDHT11+0xe2>
    }

    //  verify
    uint16_t raw_hum  = (bits[0] << 8) | bits[1];
 800065c:	2108      	movs	r1, #8
 800065e:	187b      	adds	r3, r7, r1
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	b21a      	sxth	r2, r3
 8000666:	187b      	adds	r3, r7, r1
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	b21b      	sxth	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b21a      	sxth	r2, r3
 8000670:	2316      	movs	r3, #22
 8000672:	18fb      	adds	r3, r7, r3
 8000674:	801a      	strh	r2, [r3, #0]
    uint16_t raw_tmp  = (bits[2] << 8) | bits[3];
 8000676:	187b      	adds	r3, r7, r1
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	b21a      	sxth	r2, r3
 800067e:	187b      	adds	r3, r7, r1
 8000680:	78db      	ldrb	r3, [r3, #3]
 8000682:	b21b      	sxth	r3, r3
 8000684:	4313      	orrs	r3, r2
 8000686:	b21a      	sxth	r2, r3
 8000688:	2314      	movs	r3, #20
 800068a:	18fb      	adds	r3, r7, r3
 800068c:	801a      	strh	r2, [r3, #0]
    uint8_t checksum  = bits[4];
 800068e:	2013      	movs	r0, #19
 8000690:	183b      	adds	r3, r7, r0
 8000692:	187a      	adds	r2, r7, r1
 8000694:	7912      	ldrb	r2, [r2, #4]
 8000696:	701a      	strb	r2, [r3, #0]
    if ((((bits[0] + bits[1] + bits[2] + bits[3]) & 0xFF) != checksum)) {
 8000698:	187b      	adds	r3, r7, r1
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	001a      	movs	r2, r3
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	785b      	ldrb	r3, [r3, #1]
 80006a2:	18d3      	adds	r3, r2, r3
 80006a4:	187a      	adds	r2, r7, r1
 80006a6:	7892      	ldrb	r2, [r2, #2]
 80006a8:	189b      	adds	r3, r3, r2
 80006aa:	187a      	adds	r2, r7, r1
 80006ac:	78d2      	ldrb	r2, [r2, #3]
 80006ae:	189b      	adds	r3, r3, r2
 80006b0:	22ff      	movs	r2, #255	@ 0xff
 80006b2:	401a      	ands	r2, r3
 80006b4:	183b      	adds	r3, r7, r0
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d001      	beq.n	80006c0 <readDHT11+0x200>
        return 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	e035      	b.n	800072c <readDHT11+0x26c>
    }

    // Store with one decimal place
    sensor->humidity     = raw_hum  / 10;
 80006c0:	2416      	movs	r4, #22
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	210a      	movs	r1, #10
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff fd31 	bl	8000130 <__udivsi3>
 80006ce:	0003      	movs	r3, r0
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	709a      	strb	r2, [r3, #2]
    sensor->hum_decimal  = raw_hum  % 10;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	210a      	movs	r1, #10
 80006de:	0018      	movs	r0, r3
 80006e0:	f7ff fdac 	bl	800023c <__aeabi_uidivmod>
 80006e4:	000b      	movs	r3, r1
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	70da      	strb	r2, [r3, #3]
    uint16_t tv          = raw_tmp & 0x7FFF;
 80006ee:	2410      	movs	r4, #16
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2214      	movs	r2, #20
 80006f4:	18ba      	adds	r2, r7, r2
 80006f6:	8812      	ldrh	r2, [r2, #0]
 80006f8:	0452      	lsls	r2, r2, #17
 80006fa:	0c52      	lsrs	r2, r2, #17
 80006fc:	801a      	strh	r2, [r3, #0]
    sensor->temperature  = tv / 10;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	210a      	movs	r1, #10
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff fd13 	bl	8000130 <__udivsi3>
 800070a:	0003      	movs	r3, r0
 800070c:	b29b      	uxth	r3, r3
 800070e:	b2da      	uxtb	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	701a      	strb	r2, [r3, #0]
    sensor->temp_decimal = tv % 10;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	210a      	movs	r1, #10
 800071a:	0018      	movs	r0, r3
 800071c:	f7ff fd8e 	bl	800023c <__aeabi_uidivmod>
 8000720:	000b      	movs	r3, r1
 8000722:	b29b      	uxth	r3, r3
 8000724:	b2da      	uxtb	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	705a      	strb	r2, [r3, #1]

    return 1;
 800072a:	2301      	movs	r3, #1
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	b009      	add	sp, #36	@ 0x24
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	80000007 	.word	0x80000007

08000738 <init_systick>:

#include "init.h"

volatile uint32_t g_time_ms = 0;

void init_systick(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    SysTick->LOAD = (SystemCoreClock / SYS_TICK_HZ) - 1U;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <init_systick+0x30>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	22fa      	movs	r2, #250	@ 0xfa
 8000742:	0091      	lsls	r1, r2, #2
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff fcf3 	bl	8000130 <__udivsi3>
 800074a:	0003      	movs	r3, r0
 800074c:	001a      	movs	r2, r3
 800074e:	4b07      	ldr	r3, [pc, #28]	@ (800076c <init_systick+0x34>)
 8000750:	3a01      	subs	r2, #1
 8000752:	605a      	str	r2, [r3, #4]
    SysTick->VAL  = 0U;
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <init_systick+0x34>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk
 800075a:	4b04      	ldr	r3, [pc, #16]	@ (800076c <init_systick+0x34>)
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                  | SysTick_CTRL_TICKINT_Msk
                  | SysTick_CTRL_ENABLE_Msk;
}
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	20000018 	.word	0x20000018
 800076c:	e000e010 	.word	0xe000e010

08000770 <now>:


uint32_t now(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    return g_time_ms;
 8000774:	4b02      	ldr	r3, [pc, #8]	@ (8000780 <now+0x10>)
 8000776:	681b      	ldr	r3, [r3, #0]
}
 8000778:	0018      	movs	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	200000dc 	.word	0x200000dc

08000784 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    uint32_t start = now();
 800078c:	f7ff fff0 	bl	8000770 <now>
 8000790:	0003      	movs	r3, r0
 8000792:	60fb      	str	r3, [r7, #12]
    while ((now() - start) < ms) {
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	f7ff ffeb 	bl	8000770 <now>
 800079a:	0002      	movs	r2, r0
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d8f7      	bhi.n	8000796 <delay_ms+0x12>
        // busy wait
    }
}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b004      	add	sp, #16
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <SysTick_Handler>:

/**
 * @brief  SysTick interrupt handler (called every 1 ms).
 */
void SysTick_Handler(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    g_time_ms++;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <SysTick_Handler+0x14>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4b02      	ldr	r3, [pc, #8]	@ (80007c4 <SysTick_Handler+0x14>)
 80007bc:	601a      	str	r2, [r3, #0]
}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000dc 	.word	0x200000dc

080007c8 <init_uart2>:




void init_uart2(void) {
 80007c8:	b5b0      	push	{r4, r5, r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    RCC->AHBENR  |= RCC_AHBENR_GPIOAEN;
 80007cc:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <init_uart2+0x90>)
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <init_uart2+0x90>)
 80007d2:	2180      	movs	r1, #128	@ 0x80
 80007d4:	0289      	lsls	r1, r1, #10
 80007d6:	430a      	orrs	r2, r1
 80007d8:	615a      	str	r2, [r3, #20]
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80007da:	4b1f      	ldr	r3, [pc, #124]	@ (8000858 <init_uart2+0x90>)
 80007dc:	69da      	ldr	r2, [r3, #28]
 80007de:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <init_uart2+0x90>)
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	0289      	lsls	r1, r1, #10
 80007e4:	430a      	orrs	r2, r1
 80007e6:	61da      	str	r2, [r3, #28]
    UART2_GPIO_PORT->MODER &= ~((0x3U << (UART2_TX_PIN * 2))
 80007e8:	2390      	movs	r3, #144	@ 0x90
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	2390      	movs	r3, #144	@ 0x90
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	21f0      	movs	r1, #240	@ 0xf0
 80007f4:	438a      	bics	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]
                              | (0x3U << (UART2_RX_PIN * 2)));
    UART2_GPIO_PORT->MODER |=  ((0x2U << (UART2_TX_PIN * 2))
 80007f8:	2390      	movs	r3, #144	@ 0x90
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	2390      	movs	r3, #144	@ 0x90
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	21a0      	movs	r1, #160	@ 0xa0
 8000804:	430a      	orrs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
                              | (0x2U << (UART2_RX_PIN * 2)));
    UART2_GPIO_PORT->AFR[0] &= ~((0xFU << (UART2_TX_PIN * 4))
 8000808:	2390      	movs	r3, #144	@ 0x90
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	6a1a      	ldr	r2, [r3, #32]
 800080e:	2390      	movs	r3, #144	@ 0x90
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	4912      	ldr	r1, [pc, #72]	@ (800085c <init_uart2+0x94>)
 8000814:	400a      	ands	r2, r1
 8000816:	621a      	str	r2, [r3, #32]
                               | (0xFU << (UART2_RX_PIN * 4)));
    UART2_GPIO_PORT->AFR[0] |=  ((UART2_AF << (UART2_TX_PIN * 4))
 8000818:	2390      	movs	r3, #144	@ 0x90
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	6a1a      	ldr	r2, [r3, #32]
 800081e:	2390      	movs	r3, #144	@ 0x90
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	2188      	movs	r1, #136	@ 0x88
 8000824:	0149      	lsls	r1, r1, #5
 8000826:	430a      	orrs	r2, r1
 8000828:	621a      	str	r2, [r3, #32]
                               | (UART2_AF << (UART2_RX_PIN * 4)));
    USART2->BRR  = SystemCoreClock / UART2_BAUD;
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <init_uart2+0x98>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4c0d      	ldr	r4, [pc, #52]	@ (8000864 <init_uart2+0x9c>)
 8000830:	2296      	movs	r2, #150	@ 0x96
 8000832:	0191      	lsls	r1, r2, #6
 8000834:	0018      	movs	r0, r3
 8000836:	f7ff fc7b 	bl	8000130 <__udivsi3>
 800083a:	0003      	movs	r3, r0
 800083c:	60e3      	str	r3, [r4, #12]
    USART2->CR1  = USART_CR1_TE | USART_CR1_RE;
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <init_uart2+0x9c>)
 8000840:	220c      	movs	r2, #12
 8000842:	601a      	str	r2, [r3, #0]
    USART2->CR1 |=  USART_CR1_UE;
 8000844:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <init_uart2+0x9c>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <init_uart2+0x9c>)
 800084a:	2101      	movs	r1, #1
 800084c:	430a      	orrs	r2, r1
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bdb0      	pop	{r4, r5, r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	40021000 	.word	0x40021000
 800085c:	ffff00ff 	.word	0xffff00ff
 8000860:	20000018 	.word	0x20000018
 8000864:	40004400 	.word	0x40004400

08000868 <init_tim14>:


void init_tim14(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 800086c:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <init_tim14+0x3c>)
 800086e:	69da      	ldr	r2, [r3, #28]
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <init_tim14+0x3c>)
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	0049      	lsls	r1, r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	61da      	str	r2, [r3, #28]
    TIM14_TIMER->PSC = TIM14_PRESCALER;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <init_tim14+0x40>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	490b      	ldr	r1, [pc, #44]	@ (80008ac <init_tim14+0x44>)
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff fc55 	bl	8000130 <__udivsi3>
 8000886:	0003      	movs	r3, r0
 8000888:	001a      	movs	r2, r3
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <init_tim14+0x48>)
 800088c:	3a01      	subs	r2, #1
 800088e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM14_TIMER->CR1 |= TIM_CR1_CEN;
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <init_tim14+0x48>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <init_tim14+0x48>)
 8000896:	2101      	movs	r1, #1
 8000898:	430a      	orrs	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	40021000 	.word	0x40021000
 80008a8:	20000018 	.word	0x20000018
 80008ac:	000f4240 	.word	0x000f4240
 80008b0:	40002000 	.word	0x40002000

080008b4 <init_uleD>:


void init_uleD(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <init_uleD+0x4c>)
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <init_uleD+0x4c>)
 80008be:	2180      	movs	r1, #128	@ 0x80
 80008c0:	0289      	lsls	r1, r1, #10
 80008c2:	430a      	orrs	r2, r1
 80008c4:	615a      	str	r2, [r3, #20]
    ULED_GPIO_PORT->MODER &= ~(0x3U << (ULED_GPIO_PIN * 2));
 80008c6:	2390      	movs	r3, #144	@ 0x90
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	2390      	movs	r3, #144	@ 0x90
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	490c      	ldr	r1, [pc, #48]	@ (8000904 <init_uleD+0x50>)
 80008d2:	400a      	ands	r2, r1
 80008d4:	601a      	str	r2, [r3, #0]
    ULED_GPIO_PORT->MODER |=  (0x1U << (ULED_GPIO_PIN * 2));
 80008d6:	2390      	movs	r3, #144	@ 0x90
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	2390      	movs	r3, #144	@ 0x90
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	2180      	movs	r1, #128	@ 0x80
 80008e2:	00c9      	lsls	r1, r1, #3
 80008e4:	430a      	orrs	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
    ULED_GPIO_PORT->ODR   &= ~(1U << ULED_GPIO_PIN);
 80008e8:	2390      	movs	r3, #144	@ 0x90
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	2390      	movs	r3, #144	@ 0x90
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2120      	movs	r1, #32
 80008f4:	438a      	bics	r2, r1
 80008f6:	615a      	str	r2, [r3, #20]
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	40021000 	.word	0x40021000
 8000904:	fffff3ff 	.word	0xfffff3ff

08000908 <init_all>:


void init_all(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
    init_systick();
 800090c:	f7ff ff14 	bl	8000738 <init_systick>
    init_uart2();
 8000910:	f7ff ff5a 	bl	80007c8 <init_uart2>
    init_uleD();
 8000914:	f7ff ffce 	bl	80008b4 <init_uleD>
    init_tim14();
 8000918:	f7ff ffa6 	bl	8000868 <init_tim14>
}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <main>:
dht11_t sensor;

extern data_mode_t current_mode;
extern bool systemActive;

int main(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    init_all();
 8000928:	f7ff ffee 	bl	8000908 <init_all>
    init_dht11(&sensor, TIM14);
 800092c:	4a22      	ldr	r2, [pc, #136]	@ (80009b8 <main+0x94>)
 800092e:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <main+0x98>)
 8000930:	0011      	movs	r1, r2
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff fda2 	bl	800047c <init_dht11>

    // give the DHT11 time to power up
    delay_ms(2000);
 8000938:	23fa      	movs	r3, #250	@ 0xfa
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff ff21 	bl	8000784 <delay_ms>

    // health check for sensor
    if (readDHT11(&sensor) || readDHT11(&sensor)) {
 8000942:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <main+0x98>)
 8000944:	0018      	movs	r0, r3
 8000946:	f7ff fdbb 	bl	80004c0 <readDHT11>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d105      	bne.n	800095a <main+0x36>
 800094e:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <main+0x98>)
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff fdb5 	bl	80004c0 <readDHT11>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d004      	beq.n	8000964 <main+0x40>
        LOG("===DHT WORKING !===\r\n");
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <main+0x9c>)
 800095c:	0018      	movs	r0, r3
 800095e:	f000 fcfb 	bl	8001358 <puts>
 8000962:	e003      	b.n	800096c <main+0x48>
    } else {
        LOG("===ERROR: DHT SENSOR IS NOT RESPONDING! PLEASE CHECK OR SENSOR.\r\n===");
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <main+0xa0>)
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fc90 	bl	800128c <iprintf>
    }


    LOG(
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <main+0xa4>)
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fcf2 	bl	8001358 <puts>
    		"ECEN 5813 SMART TEMPERATURE MONITOR USING STATEMACHINE\r\n"
    		    "1. TYPE 'start' for LIVE SENSOR MODE\r\n"
    		    "2. TEST 'test' for  AUTOMATED TEST MODE\r\n"
    );
    command_processor_init();
 8000974:	f7ff fce6 	bl	8000344 <command_processor_init>
    delay_ms(1000);
 8000978:	23fa      	movs	r3, #250	@ 0xfa
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	0018      	movs	r0, r3
 800097e:	f7ff ff01 	bl	8000784 <delay_ms>
    state_machine_init();
 8000982:	f000 f827 	bl	80009d4 <state_machine_init>
    test_init();
 8000986:	f000 f96d 	bl	8000c64 <test_init>

    while (1) {
        command_processor_run();
 800098a:	f7ff fcef 	bl	800036c <command_processor_run>
        state_machine_run();
 800098e:	f000 f83f 	bl	8000a10 <state_machine_run>
        if (systemActive) {
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <main+0xa8>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f7      	beq.n	800098a <main+0x66>
            if (current_mode == MODE_REAL) {
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <main+0xac>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <main+0x88>
                if (readDHT11(&sensor)) {
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <main+0x98>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fd8b 	bl	80004c0 <readDHT11>
 80009aa:	e7ee      	b.n	800098a <main+0x66>
                    // …
                }
            } else {
                test_readDHT11(&sensor);
 80009ac:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <main+0x98>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 f964 	bl	8000c7c <test_readDHT11>
        command_processor_run();
 80009b4:	e7e9      	b.n	800098a <main+0x66>
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	40002000 	.word	0x40002000
 80009bc:	200000e0 	.word	0x200000e0
 80009c0:	08002108 	.word	0x08002108
 80009c4:	08002120 	.word	0x08002120
 80009c8:	08002168 	.word	0x08002168
 80009cc:	200000d6 	.word	0x200000d6
 80009d0:	200000d5 	.word	0x200000d5

080009d4 <state_machine_init>:
    [STATE_NORMAL]  = { "Normal",  1000 },
    [STATE_WARNING] = { "Warning",  500 },
    [STATE_ALERT]   = { "Alert",    200 }
};

void state_machine_init(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
    currentState = STATE_NORMAL;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <state_machine_init+0x30>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
    lastBlinkTime = now();
 80009de:	f7ff fec7 	bl	8000770 <now>
 80009e2:	0002      	movs	r2, r0
 80009e4:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <state_machine_init+0x34>)
 80009e6:	601a      	str	r2, [r3, #0]
    ledOn = false;
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <state_machine_init+0x38>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
    GPIOA->ODR &= ~(1 << 5);  // LED OFF initially at boot
 80009ee:	2390      	movs	r3, #144	@ 0x90
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	695a      	ldr	r2, [r3, #20]
 80009f4:	2390      	movs	r3, #144	@ 0x90
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	2120      	movs	r1, #32
 80009fa:	438a      	bics	r2, r1
 80009fc:	615a      	str	r2, [r3, #20]
}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000e4 	.word	0x200000e4
 8000a08:	200000e8 	.word	0x200000e8
 8000a0c:	200000ec 	.word	0x200000ec

08000a10 <state_machine_run>:

void state_machine_run(void) {
 8000a10:	b5b0      	push	{r4, r5, r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af02      	add	r7, sp, #8
    if (!systemActive) {
 8000a16:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <state_machine_run+0x100>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4053      	eors	r3, r2
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d170      	bne.n	8000b06 <state_machine_run+0xf6>
        // Do nothing until started
        return;
    }

    uint32_t currentTime = now();
 8000a24:	f7ff fea4 	bl	8000770 <now>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	607b      	str	r3, [r7, #4]
    uint8_t temp = sensor.temperature;  // integer temperature
 8000a2c:	1cfb      	adds	r3, r7, #3
 8000a2e:	4a39      	ldr	r2, [pc, #228]	@ (8000b14 <state_machine_run+0x104>)
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	701a      	strb	r2, [r3, #0]

    // Check thresholds and update state
    state_t prevState = currentState;
 8000a34:	1cbb      	adds	r3, r7, #2
 8000a36:	4a38      	ldr	r2, [pc, #224]	@ (8000b18 <state_machine_run+0x108>)
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	701a      	strb	r2, [r3, #0]
    if (temp < TEMP_NORMAL_THRESHOLD) {
 8000a3c:	1cfb      	adds	r3, r7, #3
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b18      	cmp	r3, #24
 8000a42:	d803      	bhi.n	8000a4c <state_machine_run+0x3c>
        currentState = STATE_NORMAL;
 8000a44:	4b34      	ldr	r3, [pc, #208]	@ (8000b18 <state_machine_run+0x108>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	e00a      	b.n	8000a62 <state_machine_run+0x52>
    } else if (temp < TEMP_WARNING_THRESHOLD) {
 8000a4c:	1cfb      	adds	r3, r7, #3
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b1d      	cmp	r3, #29
 8000a52:	d803      	bhi.n	8000a5c <state_machine_run+0x4c>
        currentState = STATE_WARNING;
 8000a54:	4b30      	ldr	r3, [pc, #192]	@ (8000b18 <state_machine_run+0x108>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	e002      	b.n	8000a62 <state_machine_run+0x52>
    } else {
        currentState = STATE_ALERT;
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b18 <state_machine_run+0x108>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	701a      	strb	r2, [r3, #0]
    }

    // Print state change with full readings
    if (currentState != prevState) {
 8000a62:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <state_machine_run+0x108>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	1cba      	adds	r2, r7, #2
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d017      	beq.n	8000a9e <state_machine_run+0x8e>
        LOG("State: %s (%u.%u°C, %u.%u%%)\r\n",
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <state_machine_run+0x108>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	001a      	movs	r2, r3
 8000a74:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <state_machine_run+0x10c>)
 8000a76:	00d2      	lsls	r2, r2, #3
 8000a78:	58d1      	ldr	r1, [r2, r3]
 8000a7a:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <state_machine_run+0x104>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	001c      	movs	r4, r3
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <state_machine_run+0x104>)
 8000a82:	785b      	ldrb	r3, [r3, #1]
 8000a84:	001d      	movs	r5, r3
 8000a86:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <state_machine_run+0x104>)
 8000a88:	789b      	ldrb	r3, [r3, #2]
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <state_machine_run+0x104>)
 8000a8e:	78db      	ldrb	r3, [r3, #3]
 8000a90:	4823      	ldr	r0, [pc, #140]	@ (8000b20 <state_machine_run+0x110>)
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	9200      	str	r2, [sp, #0]
 8000a96:	002b      	movs	r3, r5
 8000a98:	0022      	movs	r2, r4
 8000a9a:	f000 fbf7 	bl	800128c <iprintf>
            sensor.temperature, sensor.temp_decimal,
            sensor.humidity, sensor.hum_decimal);
    }

    // Handle LED blinking at the current state's rate
    if ((currentTime - lastBlinkTime) >= stateTable[currentState].blinkRateMs) {
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <state_machine_run+0x114>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	1ad2      	subs	r2, r2, r3
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <state_machine_run+0x108>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	491c      	ldr	r1, [pc, #112]	@ (8000b1c <state_machine_run+0x10c>)
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	18cb      	adds	r3, r1, r3
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d327      	bcc.n	8000b08 <state_machine_run+0xf8>
        ledOn = !ledOn;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <state_machine_run+0x118>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	1e5a      	subs	r2, r3, #1
 8000abe:	4193      	sbcs	r3, r2
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4053      	eors	r3, r2
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	1c1a      	adds	r2, r3, #0
 8000aca:	2301      	movs	r3, #1
 8000acc:	4013      	ands	r3, r2
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <state_machine_run+0x118>)
 8000ad2:	701a      	strb	r2, [r3, #0]
        if (ledOn) {
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <state_machine_run+0x118>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d008      	beq.n	8000aee <state_machine_run+0xde>
            GPIOA->ODR |= (1 << 5);
 8000adc:	2390      	movs	r3, #144	@ 0x90
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	2390      	movs	r3, #144	@ 0x90
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	e007      	b.n	8000afe <state_machine_run+0xee>
        } else {
            GPIOA->ODR &= ~(1 << 5);
 8000aee:	2390      	movs	r3, #144	@ 0x90
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	2390      	movs	r3, #144	@ 0x90
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	2120      	movs	r1, #32
 8000afa:	438a      	bics	r2, r1
 8000afc:	615a      	str	r2, [r3, #20]
        }
        lastBlinkTime = currentTime;
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <state_machine_run+0x114>)
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e000      	b.n	8000b08 <state_machine_run+0xf8>
        return;
 8000b06:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	200000d6 	.word	0x200000d6
 8000b14:	200000e0 	.word	0x200000e0
 8000b18:	200000e4 	.word	0x200000e4
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	08002208 	.word	0x08002208
 8000b24:	200000e8 	.word	0x200000e8
 8000b28:	200000ec 	.word	0x200000ec

08000b2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e00a      	b.n	8000b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b3e:	e000      	b.n	8000b42 <_read+0x16>
 8000b40:	bf00      	nop
 8000b42:	0001      	movs	r1, r0
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf0      	blt.n	8000b3e <_read+0x12>
  }

  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	0018      	movs	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b006      	add	sp, #24
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e009      	b.n	8000b8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	0018      	movs	r0, r3
 8000b82:	f000 fab1 	bl	80010e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf1      	blt.n	8000b78 <_write+0x12>
  }
  return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b006      	add	sp, #24
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_close>:

int _close(int file)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	425b      	negs	r3, r3
}
 8000baa:	0018      	movs	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2280      	movs	r2, #128	@ 0x80
 8000bc0:	0192      	lsls	r2, r2, #6
 8000bc2:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b004      	add	sp, #16
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f000 fba8 	bl	800137c <__errno>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	425b      	negs	r3, r3
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	18d2      	adds	r2, r2, r3
 8000c46:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <_sbrk+0x64>)
 8000c48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b006      	add	sp, #24
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20008000 	.word	0x20008000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	200000f0 	.word	0x200000f0
 8000c60:	20000248 	.word	0x20000248

08000c64 <test_init>:
// Duration of each phase in ms
#define PHASE_DURATION_MS 5000U

static uint32_t _start_time;

void test_init(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    // record the millisecond timestamp when test mode begins
    _start_time = now();
 8000c68:	f7ff fd82 	bl	8000770 <now>
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	4b02      	ldr	r3, [pc, #8]	@ (8000c78 <test_init+0x14>)
 8000c70:	601a      	str	r2, [r3, #0]
}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000f4 	.word	0x200000f4

08000c7c <test_readDHT11>:


uint8_t test_readDHT11(dht11_t *dht) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    uint32_t elapsed = now() - _start_time;
 8000c84:	f7ff fd74 	bl	8000770 <now>
 8000c88:	0002      	movs	r2, r0
 8000c8a:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <test_readDHT11+0x94>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	60fb      	str	r3, [r7, #12]
    uint32_t phase   = (elapsed / PHASE_DURATION_MS) % 3;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	491f      	ldr	r1, [pc, #124]	@ (8000d14 <test_readDHT11+0x98>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fa4a 	bl	8000130 <__udivsi3>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	2103      	movs	r1, #3
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff facb 	bl	800023c <__aeabi_uidivmod>
 8000ca6:	000b      	movs	r3, r1
 8000ca8:	60bb      	str	r3, [r7, #8]

    switch (phase) {
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <test_readDHT11+0x3c>
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d00d      	beq.n	8000cd2 <test_readDHT11+0x56>
 8000cb6:	e019      	b.n	8000cec <test_readDHT11+0x70>
      case 0: // Normal (<25°C)
        dht->temperature  = 20;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2214      	movs	r2, #20
 8000cbc:	701a      	strb	r2, [r3, #0]
        dht->temp_decimal = 0;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	705a      	strb	r2, [r3, #1]
        dht->humidity     = 40;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2228      	movs	r2, #40	@ 0x28
 8000cc8:	709a      	strb	r2, [r3, #2]
        dht->hum_decimal  = 0;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	70da      	strb	r2, [r3, #3]
        break;
 8000cd0:	e019      	b.n	8000d06 <test_readDHT11+0x8a>

      case 1: // Warning (25–29°C)
        dht->temperature  = 28;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	221c      	movs	r2, #28
 8000cd6:	701a      	strb	r2, [r3, #0]
        dht->temp_decimal = 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	705a      	strb	r2, [r3, #1]
        dht->humidity     = 50;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2232      	movs	r2, #50	@ 0x32
 8000ce2:	709a      	strb	r2, [r3, #2]
        dht->hum_decimal  = 0;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	70da      	strb	r2, [r3, #3]
        break;
 8000cea:	e00c      	b.n	8000d06 <test_readDHT11+0x8a>

      case 2: // Alert (>=30°C)
      default:
        dht->temperature  = 36;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2224      	movs	r2, #36	@ 0x24
 8000cf0:	701a      	strb	r2, [r3, #0]
        dht->temp_decimal = 0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	705a      	strb	r2, [r3, #1]
        dht->humidity     = 60;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	223c      	movs	r2, #60	@ 0x3c
 8000cfc:	709a      	strb	r2, [r3, #2]
        dht->hum_decimal  = 0;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	70da      	strb	r2, [r3, #3]
        break;
 8000d04:	46c0      	nop			@ (mov r8, r8)
    }

    return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b004      	add	sp, #16
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000f4 	.word	0x200000f4
 8000d14:	00001388 	.word	0x00001388

08000d18 <Default_Handler>:
void SystemCoreClockUpdate(void);
int main(void);

// Default handler for all interrupts
void Default_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    // Enter infinite loop if interrupt occurs (for debugging purposes)
    while (1);
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	e7fd      	b.n	8000d1c <Default_Handler+0x4>

08000d20 <Reset_Handler>:
}

// Reset Handler
void Reset_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
    // Set the stack pointer to the end of the stack memory (from _estack)
    __set_MSP((uint32_t)&_estack);
 8000d26:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <Reset_Handler+0x60>)
 8000d28:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f383 8808 	msr	MSP, r3
}
 8000d30:	46c0      	nop			@ (mov r8, r8)

    // Call system initialization function (e.g., setup clock, peripherals)
    SystemInit();
 8000d32:	f000 f873 	bl	8000e1c <SystemInit>

    // Copy the data segment initializers from flash to SRAM
    uint32_t *data_src = &_sidata;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <Reset_Handler+0x64>)
 8000d38:	60fb      	str	r3, [r7, #12]
    uint32_t *data_dest = &_sdata;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <Reset_Handler+0x68>)
 8000d3c:	60bb      	str	r3, [r7, #8]
    while (data_dest < &_edata) {
 8000d3e:	e007      	b.n	8000d50 <Reset_Handler+0x30>
        *data_dest++ = *data_src++;
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	1d13      	adds	r3, r2, #4
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1d19      	adds	r1, r3, #4
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	601a      	str	r2, [r3, #0]
    while (data_dest < &_edata) {
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <Reset_Handler+0x6c>)
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d3f3      	bcc.n	8000d40 <Reset_Handler+0x20>
    }

    // Zero fill the BSS segment
    uint32_t *bss_dest = &_sbss;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <Reset_Handler+0x70>)
 8000d5a:	607b      	str	r3, [r7, #4]
    while (bss_dest < &_ebss) {
 8000d5c:	e004      	b.n	8000d68 <Reset_Handler+0x48>
        *bss_dest++ = 0;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	1d1a      	adds	r2, r3, #4
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
    while (bss_dest < &_ebss) {
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <Reset_Handler+0x74>)
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d3f6      	bcc.n	8000d5e <Reset_Handler+0x3e>
    }

    // Call the static constructors (C runtime environment setup)
    __libc_init_array();
 8000d70:	f000 fb0a 	bl	8001388 <__libc_init_array>

    // Update system core clock
    SystemCoreClockUpdate();
 8000d74:	f000 f89a 	bl	8000eac <SystemCoreClockUpdate>

    // Jump to main function
    main();
 8000d78:	f7ff fdd4 	bl	8000924 <main>

    // Infinite loop if main returns (should not reach here)
    while (1);
 8000d7c:	46c0      	nop			@ (mov r8, r8)
 8000d7e:	e7fd      	b.n	8000d7c <Reset_Handler+0x5c>
 8000d80:	20008000 	.word	0x20008000
 8000d84:	08002274 	.word	0x08002274
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000078 	.word	0x20000078
 8000d90:	20000078 	.word	0x20000078
 8000d94:	20000244 	.word	0x20000244

08000d98 <Set_Clocks_To_48MHz>:
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <Set_Clocks_To_48MHz+0x78>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <Set_Clocks_To_48MHz+0x78>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000dae:	2180      	movs	r1, #128	@ 0x80
 8000db0:	0249      	lsls	r1, r1, #9
 8000db2:	430a      	orrs	r2, r1
 8000db4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dbc:	2380      	movs	r3, #128	@ 0x80
 8000dbe:	029b      	lsls	r3, r3, #10
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d0f9      	beq.n	8000db8 <Set_Clocks_To_48MHz+0x20>
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	22f0      	movs	r2, #240	@ 0xf0
 8000dca:	4393      	bics	r3, r2
 8000dcc:	001a      	movs	r2, r3
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000ddc:	2103      	movs	r1, #3
 8000dde:	430a      	orrs	r2, r1
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	089a      	lsrs	r2, r3, #2
 8000dea:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4053      	eors	r3, r2
 8000df0:	2203      	movs	r2, #3
 8000df2:	4013      	ands	r3, r2
 8000df4:	d1f6      	bne.n	8000de4 <Set_Clocks_To_48MHz+0x4c>
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <Set_Clocks_To_48MHz+0x80>)
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <Set_Clocks_To_48MHz+0x7c>)
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	00c9      	lsls	r1, r1, #3
 8000e04:	430a      	orrs	r2, r1
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	40022000 	.word	0x40022000
 8000e14:	40021000 	.word	0x40021000
 8000e18:	fffff8ff 	.word	0xfffff8ff

08000e1c <SystemInit>:
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <SystemInit+0x78>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <SystemInit+0x78>)
 8000e26:	2101      	movs	r1, #1
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <SystemInit+0x78>)
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <SystemInit+0x78>)
 8000e32:	4919      	ldr	r1, [pc, #100]	@ (8000e98 <SystemInit+0x7c>)
 8000e34:	400a      	ands	r2, r1
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <SystemInit+0x78>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <SystemInit+0x78>)
 8000e3e:	4917      	ldr	r1, [pc, #92]	@ (8000e9c <SystemInit+0x80>)
 8000e40:	400a      	ands	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <SystemInit+0x78>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <SystemInit+0x78>)
 8000e4a:	4915      	ldr	r1, [pc, #84]	@ (8000ea0 <SystemInit+0x84>)
 8000e4c:	400a      	ands	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <SystemInit+0x78>)
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <SystemInit+0x78>)
 8000e56:	4913      	ldr	r1, [pc, #76]	@ (8000ea4 <SystemInit+0x88>)
 8000e58:	400a      	ands	r2, r1
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <SystemInit+0x78>)
 8000e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <SystemInit+0x78>)
 8000e62:	210f      	movs	r1, #15
 8000e64:	438a      	bics	r2, r1
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <SystemInit+0x78>)
 8000e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <SystemInit+0x78>)
 8000e6e:	490e      	ldr	r1, [pc, #56]	@ (8000ea8 <SystemInit+0x8c>)
 8000e70:	400a      	ands	r2, r1
 8000e72:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e74:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <SystemInit+0x78>)
 8000e76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <SystemInit+0x78>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	438a      	bics	r2, r1
 8000e7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <SystemInit+0x78>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	f7ff ff87 	bl	8000d98 <Set_Clocks_To_48MHz>
 8000e8a:	f000 f89f 	bl	8000fcc <Init_USART2>
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	08ffb80c 	.word	0x08ffb80c
 8000e9c:	fef6ffff 	.word	0xfef6ffff
 8000ea0:	fffbffff 	.word	0xfffbffff
 8000ea4:	ffc0ffff 	.word	0xffc0ffff
 8000ea8:	fff0feac 	.word	0xfff0feac

08000eac <SystemCoreClockUpdate>:
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb8 <SystemCoreClockUpdate+0x10c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b0c      	cmp	r3, #12
 8000ed0:	d00f      	beq.n	8000ef2 <SystemCoreClockUpdate+0x46>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b0c      	cmp	r3, #12
 8000ed6:	d859      	bhi.n	8000f8c <SystemCoreClockUpdate+0xe0>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d015      	beq.n	8000f0a <SystemCoreClockUpdate+0x5e>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d853      	bhi.n	8000f8c <SystemCoreClockUpdate+0xe0>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <SystemCoreClockUpdate+0x4e>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d008      	beq.n	8000f02 <SystemCoreClockUpdate+0x56>
 8000ef0:	e04c      	b.n	8000f8c <SystemCoreClockUpdate+0xe0>
 8000ef2:	4b32      	ldr	r3, [pc, #200]	@ (8000fbc <SystemCoreClockUpdate+0x110>)
 8000ef4:	4a32      	ldr	r2, [pc, #200]	@ (8000fc0 <SystemCoreClockUpdate+0x114>)
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e04c      	b.n	8000f94 <SystemCoreClockUpdate+0xe8>
 8000efa:	4b30      	ldr	r3, [pc, #192]	@ (8000fbc <SystemCoreClockUpdate+0x110>)
 8000efc:	4a31      	ldr	r2, [pc, #196]	@ (8000fc4 <SystemCoreClockUpdate+0x118>)
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	e048      	b.n	8000f94 <SystemCoreClockUpdate+0xe8>
 8000f02:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <SystemCoreClockUpdate+0x110>)
 8000f04:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc4 <SystemCoreClockUpdate+0x118>)
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e044      	b.n	8000f94 <SystemCoreClockUpdate+0xe8>
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb8 <SystemCoreClockUpdate+0x10c>)
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	23f0      	movs	r3, #240	@ 0xf0
 8000f10:	039b      	lsls	r3, r3, #14
 8000f12:	4013      	ands	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <SystemCoreClockUpdate+0x10c>)
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	23c0      	movs	r3, #192	@ 0xc0
 8000f1c:	025b      	lsls	r3, r3, #9
 8000f1e:	4013      	ands	r3, r2
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	0c9b      	lsrs	r3, r3, #18
 8000f26:	3302      	adds	r3, #2
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <SystemCoreClockUpdate+0x10c>)
 8000f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2e:	220f      	movs	r2, #15
 8000f30:	4013      	ands	r3, r2
 8000f32:	3301      	adds	r3, #1
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	025b      	lsls	r3, r3, #9
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d10a      	bne.n	8000f56 <SystemCoreClockUpdate+0xaa>
 8000f40:	6839      	ldr	r1, [r7, #0]
 8000f42:	4820      	ldr	r0, [pc, #128]	@ (8000fc4 <SystemCoreClockUpdate+0x118>)
 8000f44:	f7ff f8f4 	bl	8000130 <__udivsi3>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	001a      	movs	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	435a      	muls	r2, r3
 8000f50:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <SystemCoreClockUpdate+0x110>)
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e01e      	b.n	8000f94 <SystemCoreClockUpdate+0xe8>
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	23c0      	movs	r3, #192	@ 0xc0
 8000f5a:	025b      	lsls	r3, r3, #9
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d10a      	bne.n	8000f76 <SystemCoreClockUpdate+0xca>
 8000f60:	6839      	ldr	r1, [r7, #0]
 8000f62:	4817      	ldr	r0, [pc, #92]	@ (8000fc0 <SystemCoreClockUpdate+0x114>)
 8000f64:	f7ff f8e4 	bl	8000130 <__udivsi3>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	435a      	muls	r2, r3
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <SystemCoreClockUpdate+0x110>)
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e00e      	b.n	8000f94 <SystemCoreClockUpdate+0xe8>
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <SystemCoreClockUpdate+0x118>)
 8000f7a:	f7ff f8d9 	bl	8000130 <__udivsi3>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	001a      	movs	r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	435a      	muls	r2, r3
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <SystemCoreClockUpdate+0x110>)
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e003      	b.n	8000f94 <SystemCoreClockUpdate+0xe8>
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <SystemCoreClockUpdate+0x110>)
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <SystemCoreClockUpdate+0x118>)
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <SystemCoreClockUpdate+0x10c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <SystemCoreClockUpdate+0x11c>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <SystemCoreClockUpdate+0x110>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	40da      	lsrs	r2, r3
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <SystemCoreClockUpdate+0x110>)
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b004      	add	sp, #16
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	02dc6c00 	.word	0x02dc6c00
 8000fc4:	007a1200 	.word	0x007a1200
 8000fc8:	08002228 	.word	0x08002228

08000fcc <Init_USART2>:
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4b31      	ldr	r3, [pc, #196]	@ (8001098 <Init_USART2+0xcc>)
 8000fd2:	69da      	ldr	r2, [r3, #28]
 8000fd4:	4b30      	ldr	r3, [pc, #192]	@ (8001098 <Init_USART2+0xcc>)
 8000fd6:	2180      	movs	r1, #128	@ 0x80
 8000fd8:	0289      	lsls	r1, r1, #10
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	61da      	str	r2, [r3, #28]
 8000fde:	4b2e      	ldr	r3, [pc, #184]	@ (8001098 <Init_USART2+0xcc>)
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8001098 <Init_USART2+0xcc>)
 8000fe4:	2180      	movs	r1, #128	@ 0x80
 8000fe6:	0289      	lsls	r1, r1, #10
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	615a      	str	r2, [r3, #20]
 8000fec:	2390      	movs	r3, #144	@ 0x90
 8000fee:	05db      	lsls	r3, r3, #23
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2230      	movs	r2, #48	@ 0x30
 8000ff4:	4393      	bics	r3, r2
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	2390      	movs	r3, #144	@ 0x90
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	2390      	movs	r3, #144	@ 0x90
 8001004:	05db      	lsls	r3, r3, #23
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	22c0      	movs	r2, #192	@ 0xc0
 800100a:	4393      	bics	r3, r2
 800100c:	001a      	movs	r2, r3
 800100e:	2390      	movs	r3, #144	@ 0x90
 8001010:	05db      	lsls	r3, r3, #23
 8001012:	2180      	movs	r1, #128	@ 0x80
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	2390      	movs	r3, #144	@ 0x90
 800101a:	05db      	lsls	r3, r3, #23
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a1f      	ldr	r2, [pc, #124]	@ (800109c <Init_USART2+0xd0>)
 8001020:	401a      	ands	r2, r3
 8001022:	2390      	movs	r3, #144	@ 0x90
 8001024:	05db      	lsls	r3, r3, #23
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	0049      	lsls	r1, r1, #1
 800102a:	430a      	orrs	r2, r1
 800102c:	621a      	str	r2, [r3, #32]
 800102e:	2390      	movs	r3, #144	@ 0x90
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a1a      	ldr	r2, [pc, #104]	@ (80010a0 <Init_USART2+0xd4>)
 8001036:	401a      	ands	r2, r3
 8001038:	2390      	movs	r3, #144	@ 0x90
 800103a:	05db      	lsls	r3, r3, #23
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	0149      	lsls	r1, r1, #5
 8001040:	430a      	orrs	r2, r1
 8001042:	621a      	str	r2, [r3, #32]
 8001044:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <Init_USART2+0xd8>)
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <Init_USART2+0xdc>)
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <Init_USART2+0xd8>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <Init_USART2+0xd8>)
 8001050:	4916      	ldr	r1, [pc, #88]	@ (80010ac <Init_USART2+0xe0>)
 8001052:	400a      	ands	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <Init_USART2+0xd8>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <Init_USART2+0xd8>)
 800105c:	4914      	ldr	r1, [pc, #80]	@ (80010b0 <Init_USART2+0xe4>)
 800105e:	400a      	ands	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <Init_USART2+0xd8>)
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <Init_USART2+0xd8>)
 8001068:	4912      	ldr	r1, [pc, #72]	@ (80010b4 <Init_USART2+0xe8>)
 800106a:	400a      	ands	r2, r1
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <Init_USART2+0xd8>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <Init_USART2+0xd8>)
 8001074:	2108      	movs	r1, #8
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <Init_USART2+0xd8>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <Init_USART2+0xd8>)
 8001080:	2104      	movs	r1, #4
 8001082:	430a      	orrs	r2, r1
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <Init_USART2+0xd8>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <Init_USART2+0xd8>)
 800108c:	2101      	movs	r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	fffff0ff 	.word	0xfffff0ff
 80010a0:	ffff0fff 	.word	0xffff0fff
 80010a4:	40004400 	.word	0x40004400
 80010a8:	000009c4 	.word	0x000009c4
 80010ac:	fffffbff 	.word	0xfffffbff
 80010b0:	efffefff 	.word	0xefffefff
 80010b4:	ffffcfff 	.word	0xffffcfff

080010b8 <UART_Transmit>:
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	0002      	movs	r2, r0
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	46c0      	nop			@ (mov r8, r8)
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <UART_Transmit+0x2c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	4013      	ands	r3, r2
 80010ce:	d0fa      	beq.n	80010c6 <UART_Transmit+0xe>
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <UART_Transmit+0x2c>)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	8513      	strh	r3, [r2, #40]	@ 0x28
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	40004400 	.word	0x40004400

080010e8 <__io_putchar>:
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff ffdf 	bl	80010b8 <UART_Transmit>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <std>:
 8001104:	2300      	movs	r3, #0
 8001106:	b510      	push	{r4, lr}
 8001108:	0004      	movs	r4, r0
 800110a:	6003      	str	r3, [r0, #0]
 800110c:	6043      	str	r3, [r0, #4]
 800110e:	6083      	str	r3, [r0, #8]
 8001110:	8181      	strh	r1, [r0, #12]
 8001112:	6643      	str	r3, [r0, #100]	@ 0x64
 8001114:	81c2      	strh	r2, [r0, #14]
 8001116:	6103      	str	r3, [r0, #16]
 8001118:	6143      	str	r3, [r0, #20]
 800111a:	6183      	str	r3, [r0, #24]
 800111c:	0019      	movs	r1, r3
 800111e:	2208      	movs	r2, #8
 8001120:	305c      	adds	r0, #92	@ 0x5c
 8001122:	f000 f923 	bl	800136c <memset>
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <std+0x50>)
 8001128:	6224      	str	r4, [r4, #32]
 800112a:	6263      	str	r3, [r4, #36]	@ 0x24
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <std+0x54>)
 800112e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <std+0x58>)
 8001132:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001134:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <std+0x5c>)
 8001136:	6323      	str	r3, [r4, #48]	@ 0x30
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <std+0x60>)
 800113a:	429c      	cmp	r4, r3
 800113c:	d005      	beq.n	800114a <std+0x46>
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <std+0x64>)
 8001140:	429c      	cmp	r4, r3
 8001142:	d002      	beq.n	800114a <std+0x46>
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <std+0x68>)
 8001146:	429c      	cmp	r4, r3
 8001148:	d103      	bne.n	8001152 <std+0x4e>
 800114a:	0020      	movs	r0, r4
 800114c:	3058      	adds	r0, #88	@ 0x58
 800114e:	f000 f93f 	bl	80013d0 <__retarget_lock_init_recursive>
 8001152:	bd10      	pop	{r4, pc}
 8001154:	08001c21 	.word	0x08001c21
 8001158:	08001c49 	.word	0x08001c49
 800115c:	08001c81 	.word	0x08001c81
 8001160:	08001cad 	.word	0x08001cad
 8001164:	200000f8 	.word	0x200000f8
 8001168:	20000160 	.word	0x20000160
 800116c:	200001c8 	.word	0x200001c8

08001170 <stdio_exit_handler>:
 8001170:	b510      	push	{r4, lr}
 8001172:	4a03      	ldr	r2, [pc, #12]	@ (8001180 <stdio_exit_handler+0x10>)
 8001174:	4903      	ldr	r1, [pc, #12]	@ (8001184 <stdio_exit_handler+0x14>)
 8001176:	4804      	ldr	r0, [pc, #16]	@ (8001188 <stdio_exit_handler+0x18>)
 8001178:	f000 f86c 	bl	8001254 <_fwalk_sglue>
 800117c:	bd10      	pop	{r4, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	2000001c 	.word	0x2000001c
 8001184:	08001ba9 	.word	0x08001ba9
 8001188:	2000002c 	.word	0x2000002c

0800118c <cleanup_stdio>:
 800118c:	6841      	ldr	r1, [r0, #4]
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <cleanup_stdio+0x30>)
 8001190:	b510      	push	{r4, lr}
 8001192:	0004      	movs	r4, r0
 8001194:	4299      	cmp	r1, r3
 8001196:	d001      	beq.n	800119c <cleanup_stdio+0x10>
 8001198:	f000 fd06 	bl	8001ba8 <_fflush_r>
 800119c:	68a1      	ldr	r1, [r4, #8]
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <cleanup_stdio+0x34>)
 80011a0:	4299      	cmp	r1, r3
 80011a2:	d002      	beq.n	80011aa <cleanup_stdio+0x1e>
 80011a4:	0020      	movs	r0, r4
 80011a6:	f000 fcff 	bl	8001ba8 <_fflush_r>
 80011aa:	68e1      	ldr	r1, [r4, #12]
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <cleanup_stdio+0x38>)
 80011ae:	4299      	cmp	r1, r3
 80011b0:	d002      	beq.n	80011b8 <cleanup_stdio+0x2c>
 80011b2:	0020      	movs	r0, r4
 80011b4:	f000 fcf8 	bl	8001ba8 <_fflush_r>
 80011b8:	bd10      	pop	{r4, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	200000f8 	.word	0x200000f8
 80011c0:	20000160 	.word	0x20000160
 80011c4:	200001c8 	.word	0x200001c8

080011c8 <global_stdio_init.part.0>:
 80011c8:	b510      	push	{r4, lr}
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <global_stdio_init.part.0+0x28>)
 80011cc:	4a09      	ldr	r2, [pc, #36]	@ (80011f4 <global_stdio_init.part.0+0x2c>)
 80011ce:	2104      	movs	r1, #4
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	4809      	ldr	r0, [pc, #36]	@ (80011f8 <global_stdio_init.part.0+0x30>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f7ff ff95 	bl	8001104 <std>
 80011da:	2201      	movs	r2, #1
 80011dc:	2109      	movs	r1, #9
 80011de:	4807      	ldr	r0, [pc, #28]	@ (80011fc <global_stdio_init.part.0+0x34>)
 80011e0:	f7ff ff90 	bl	8001104 <std>
 80011e4:	2202      	movs	r2, #2
 80011e6:	2112      	movs	r1, #18
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <global_stdio_init.part.0+0x38>)
 80011ea:	f7ff ff8b 	bl	8001104 <std>
 80011ee:	bd10      	pop	{r4, pc}
 80011f0:	20000230 	.word	0x20000230
 80011f4:	08001171 	.word	0x08001171
 80011f8:	200000f8 	.word	0x200000f8
 80011fc:	20000160 	.word	0x20000160
 8001200:	200001c8 	.word	0x200001c8

08001204 <__sfp_lock_acquire>:
 8001204:	b510      	push	{r4, lr}
 8001206:	4802      	ldr	r0, [pc, #8]	@ (8001210 <__sfp_lock_acquire+0xc>)
 8001208:	f000 f8e3 	bl	80013d2 <__retarget_lock_acquire_recursive>
 800120c:	bd10      	pop	{r4, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	20000235 	.word	0x20000235

08001214 <__sfp_lock_release>:
 8001214:	b510      	push	{r4, lr}
 8001216:	4802      	ldr	r0, [pc, #8]	@ (8001220 <__sfp_lock_release+0xc>)
 8001218:	f000 f8dc 	bl	80013d4 <__retarget_lock_release_recursive>
 800121c:	bd10      	pop	{r4, pc}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	20000235 	.word	0x20000235

08001224 <__sinit>:
 8001224:	b510      	push	{r4, lr}
 8001226:	0004      	movs	r4, r0
 8001228:	f7ff ffec 	bl	8001204 <__sfp_lock_acquire>
 800122c:	6a23      	ldr	r3, [r4, #32]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <__sinit+0x14>
 8001232:	f7ff ffef 	bl	8001214 <__sfp_lock_release>
 8001236:	bd10      	pop	{r4, pc}
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <__sinit+0x28>)
 800123a:	6223      	str	r3, [r4, #32]
 800123c:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <__sinit+0x2c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f6      	bne.n	8001232 <__sinit+0xe>
 8001244:	f7ff ffc0 	bl	80011c8 <global_stdio_init.part.0>
 8001248:	e7f3      	b.n	8001232 <__sinit+0xe>
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	0800118d 	.word	0x0800118d
 8001250:	20000230 	.word	0x20000230

08001254 <_fwalk_sglue>:
 8001254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001256:	0014      	movs	r4, r2
 8001258:	2600      	movs	r6, #0
 800125a:	9000      	str	r0, [sp, #0]
 800125c:	9101      	str	r1, [sp, #4]
 800125e:	68a5      	ldr	r5, [r4, #8]
 8001260:	6867      	ldr	r7, [r4, #4]
 8001262:	3f01      	subs	r7, #1
 8001264:	d504      	bpl.n	8001270 <_fwalk_sglue+0x1c>
 8001266:	6824      	ldr	r4, [r4, #0]
 8001268:	2c00      	cmp	r4, #0
 800126a:	d1f8      	bne.n	800125e <_fwalk_sglue+0xa>
 800126c:	0030      	movs	r0, r6
 800126e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001270:	89ab      	ldrh	r3, [r5, #12]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d908      	bls.n	8001288 <_fwalk_sglue+0x34>
 8001276:	220e      	movs	r2, #14
 8001278:	5eab      	ldrsh	r3, [r5, r2]
 800127a:	3301      	adds	r3, #1
 800127c:	d004      	beq.n	8001288 <_fwalk_sglue+0x34>
 800127e:	0029      	movs	r1, r5
 8001280:	9800      	ldr	r0, [sp, #0]
 8001282:	9b01      	ldr	r3, [sp, #4]
 8001284:	4798      	blx	r3
 8001286:	4306      	orrs	r6, r0
 8001288:	3568      	adds	r5, #104	@ 0x68
 800128a:	e7ea      	b.n	8001262 <_fwalk_sglue+0xe>

0800128c <iprintf>:
 800128c:	b40f      	push	{r0, r1, r2, r3}
 800128e:	b507      	push	{r0, r1, r2, lr}
 8001290:	4905      	ldr	r1, [pc, #20]	@ (80012a8 <iprintf+0x1c>)
 8001292:	ab04      	add	r3, sp, #16
 8001294:	6808      	ldr	r0, [r1, #0]
 8001296:	cb04      	ldmia	r3!, {r2}
 8001298:	6881      	ldr	r1, [r0, #8]
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	f000 f8c2 	bl	8001424 <_vfiprintf_r>
 80012a0:	b003      	add	sp, #12
 80012a2:	bc08      	pop	{r3}
 80012a4:	b004      	add	sp, #16
 80012a6:	4718      	bx	r3
 80012a8:	20000028 	.word	0x20000028

080012ac <_puts_r>:
 80012ac:	6a03      	ldr	r3, [r0, #32]
 80012ae:	b570      	push	{r4, r5, r6, lr}
 80012b0:	0005      	movs	r5, r0
 80012b2:	000e      	movs	r6, r1
 80012b4:	6884      	ldr	r4, [r0, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <_puts_r+0x12>
 80012ba:	f7ff ffb3 	bl	8001224 <__sinit>
 80012be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012c0:	07db      	lsls	r3, r3, #31
 80012c2:	d405      	bmi.n	80012d0 <_puts_r+0x24>
 80012c4:	89a3      	ldrh	r3, [r4, #12]
 80012c6:	059b      	lsls	r3, r3, #22
 80012c8:	d402      	bmi.n	80012d0 <_puts_r+0x24>
 80012ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012cc:	f000 f881 	bl	80013d2 <__retarget_lock_acquire_recursive>
 80012d0:	89a3      	ldrh	r3, [r4, #12]
 80012d2:	071b      	lsls	r3, r3, #28
 80012d4:	d502      	bpl.n	80012dc <_puts_r+0x30>
 80012d6:	6923      	ldr	r3, [r4, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d11f      	bne.n	800131c <_puts_r+0x70>
 80012dc:	0021      	movs	r1, r4
 80012de:	0028      	movs	r0, r5
 80012e0:	f000 fd2c 	bl	8001d3c <__swsetup_r>
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d019      	beq.n	800131c <_puts_r+0x70>
 80012e8:	2501      	movs	r5, #1
 80012ea:	426d      	negs	r5, r5
 80012ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012ee:	07db      	lsls	r3, r3, #31
 80012f0:	d405      	bmi.n	80012fe <_puts_r+0x52>
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	059b      	lsls	r3, r3, #22
 80012f6:	d402      	bmi.n	80012fe <_puts_r+0x52>
 80012f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012fa:	f000 f86b 	bl	80013d4 <__retarget_lock_release_recursive>
 80012fe:	0028      	movs	r0, r5
 8001300:	bd70      	pop	{r4, r5, r6, pc}
 8001302:	3601      	adds	r6, #1
 8001304:	60a3      	str	r3, [r4, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	da04      	bge.n	8001314 <_puts_r+0x68>
 800130a:	69a2      	ldr	r2, [r4, #24]
 800130c:	429a      	cmp	r2, r3
 800130e:	dc16      	bgt.n	800133e <_puts_r+0x92>
 8001310:	290a      	cmp	r1, #10
 8001312:	d014      	beq.n	800133e <_puts_r+0x92>
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	6022      	str	r2, [r4, #0]
 800131a:	7019      	strb	r1, [r3, #0]
 800131c:	68a3      	ldr	r3, [r4, #8]
 800131e:	7831      	ldrb	r1, [r6, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	2900      	cmp	r1, #0
 8001324:	d1ed      	bne.n	8001302 <_puts_r+0x56>
 8001326:	60a3      	str	r3, [r4, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	da0f      	bge.n	800134c <_puts_r+0xa0>
 800132c:	0022      	movs	r2, r4
 800132e:	0028      	movs	r0, r5
 8001330:	310a      	adds	r1, #10
 8001332:	f000 fcc1 	bl	8001cb8 <__swbuf_r>
 8001336:	3001      	adds	r0, #1
 8001338:	d0d6      	beq.n	80012e8 <_puts_r+0x3c>
 800133a:	250a      	movs	r5, #10
 800133c:	e7d6      	b.n	80012ec <_puts_r+0x40>
 800133e:	0022      	movs	r2, r4
 8001340:	0028      	movs	r0, r5
 8001342:	f000 fcb9 	bl	8001cb8 <__swbuf_r>
 8001346:	3001      	adds	r0, #1
 8001348:	d1e8      	bne.n	800131c <_puts_r+0x70>
 800134a:	e7cd      	b.n	80012e8 <_puts_r+0x3c>
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	6022      	str	r2, [r4, #0]
 8001352:	220a      	movs	r2, #10
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	e7f0      	b.n	800133a <_puts_r+0x8e>

08001358 <puts>:
 8001358:	b510      	push	{r4, lr}
 800135a:	4b03      	ldr	r3, [pc, #12]	@ (8001368 <puts+0x10>)
 800135c:	0001      	movs	r1, r0
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	f7ff ffa4 	bl	80012ac <_puts_r>
 8001364:	bd10      	pop	{r4, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	20000028 	.word	0x20000028

0800136c <memset>:
 800136c:	0003      	movs	r3, r0
 800136e:	1882      	adds	r2, r0, r2
 8001370:	4293      	cmp	r3, r2
 8001372:	d100      	bne.n	8001376 <memset+0xa>
 8001374:	4770      	bx	lr
 8001376:	7019      	strb	r1, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	e7f9      	b.n	8001370 <memset+0x4>

0800137c <__errno>:
 800137c:	4b01      	ldr	r3, [pc, #4]	@ (8001384 <__errno+0x8>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	4770      	bx	lr
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	20000028 	.word	0x20000028

08001388 <__libc_init_array>:
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	2600      	movs	r6, #0
 800138c:	4c0c      	ldr	r4, [pc, #48]	@ (80013c0 <__libc_init_array+0x38>)
 800138e:	4d0d      	ldr	r5, [pc, #52]	@ (80013c4 <__libc_init_array+0x3c>)
 8001390:	1b64      	subs	r4, r4, r5
 8001392:	10a4      	asrs	r4, r4, #2
 8001394:	42a6      	cmp	r6, r4
 8001396:	d109      	bne.n	80013ac <__libc_init_array+0x24>
 8001398:	2600      	movs	r6, #0
 800139a:	f000 fe73 	bl	8002084 <_init>
 800139e:	4c0a      	ldr	r4, [pc, #40]	@ (80013c8 <__libc_init_array+0x40>)
 80013a0:	4d0a      	ldr	r5, [pc, #40]	@ (80013cc <__libc_init_array+0x44>)
 80013a2:	1b64      	subs	r4, r4, r5
 80013a4:	10a4      	asrs	r4, r4, #2
 80013a6:	42a6      	cmp	r6, r4
 80013a8:	d105      	bne.n	80013b6 <__libc_init_array+0x2e>
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
 80013ac:	00b3      	lsls	r3, r6, #2
 80013ae:	58eb      	ldr	r3, [r5, r3]
 80013b0:	4798      	blx	r3
 80013b2:	3601      	adds	r6, #1
 80013b4:	e7ee      	b.n	8001394 <__libc_init_array+0xc>
 80013b6:	00b3      	lsls	r3, r6, #2
 80013b8:	58eb      	ldr	r3, [r5, r3]
 80013ba:	4798      	blx	r3
 80013bc:	3601      	adds	r6, #1
 80013be:	e7f2      	b.n	80013a6 <__libc_init_array+0x1e>
 80013c0:	0800226c 	.word	0x0800226c
 80013c4:	0800226c 	.word	0x0800226c
 80013c8:	08002270 	.word	0x08002270
 80013cc:	0800226c 	.word	0x0800226c

080013d0 <__retarget_lock_init_recursive>:
 80013d0:	4770      	bx	lr

080013d2 <__retarget_lock_acquire_recursive>:
 80013d2:	4770      	bx	lr

080013d4 <__retarget_lock_release_recursive>:
 80013d4:	4770      	bx	lr

080013d6 <__sfputc_r>:
 80013d6:	6893      	ldr	r3, [r2, #8]
 80013d8:	b510      	push	{r4, lr}
 80013da:	3b01      	subs	r3, #1
 80013dc:	6093      	str	r3, [r2, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da04      	bge.n	80013ec <__sfputc_r+0x16>
 80013e2:	6994      	ldr	r4, [r2, #24]
 80013e4:	42a3      	cmp	r3, r4
 80013e6:	db07      	blt.n	80013f8 <__sfputc_r+0x22>
 80013e8:	290a      	cmp	r1, #10
 80013ea:	d005      	beq.n	80013f8 <__sfputc_r+0x22>
 80013ec:	6813      	ldr	r3, [r2, #0]
 80013ee:	1c58      	adds	r0, r3, #1
 80013f0:	6010      	str	r0, [r2, #0]
 80013f2:	7019      	strb	r1, [r3, #0]
 80013f4:	0008      	movs	r0, r1
 80013f6:	bd10      	pop	{r4, pc}
 80013f8:	f000 fc5e 	bl	8001cb8 <__swbuf_r>
 80013fc:	0001      	movs	r1, r0
 80013fe:	e7f9      	b.n	80013f4 <__sfputc_r+0x1e>

08001400 <__sfputs_r>:
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	0006      	movs	r6, r0
 8001404:	000f      	movs	r7, r1
 8001406:	0014      	movs	r4, r2
 8001408:	18d5      	adds	r5, r2, r3
 800140a:	42ac      	cmp	r4, r5
 800140c:	d101      	bne.n	8001412 <__sfputs_r+0x12>
 800140e:	2000      	movs	r0, #0
 8001410:	e007      	b.n	8001422 <__sfputs_r+0x22>
 8001412:	7821      	ldrb	r1, [r4, #0]
 8001414:	003a      	movs	r2, r7
 8001416:	0030      	movs	r0, r6
 8001418:	f7ff ffdd 	bl	80013d6 <__sfputc_r>
 800141c:	3401      	adds	r4, #1
 800141e:	1c43      	adds	r3, r0, #1
 8001420:	d1f3      	bne.n	800140a <__sfputs_r+0xa>
 8001422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001424 <_vfiprintf_r>:
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	b0a1      	sub	sp, #132	@ 0x84
 8001428:	000f      	movs	r7, r1
 800142a:	0015      	movs	r5, r2
 800142c:	001e      	movs	r6, r3
 800142e:	9003      	str	r0, [sp, #12]
 8001430:	2800      	cmp	r0, #0
 8001432:	d004      	beq.n	800143e <_vfiprintf_r+0x1a>
 8001434:	6a03      	ldr	r3, [r0, #32]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <_vfiprintf_r+0x1a>
 800143a:	f7ff fef3 	bl	8001224 <__sinit>
 800143e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001440:	07db      	lsls	r3, r3, #31
 8001442:	d405      	bmi.n	8001450 <_vfiprintf_r+0x2c>
 8001444:	89bb      	ldrh	r3, [r7, #12]
 8001446:	059b      	lsls	r3, r3, #22
 8001448:	d402      	bmi.n	8001450 <_vfiprintf_r+0x2c>
 800144a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800144c:	f7ff ffc1 	bl	80013d2 <__retarget_lock_acquire_recursive>
 8001450:	89bb      	ldrh	r3, [r7, #12]
 8001452:	071b      	lsls	r3, r3, #28
 8001454:	d502      	bpl.n	800145c <_vfiprintf_r+0x38>
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d113      	bne.n	8001484 <_vfiprintf_r+0x60>
 800145c:	0039      	movs	r1, r7
 800145e:	9803      	ldr	r0, [sp, #12]
 8001460:	f000 fc6c 	bl	8001d3c <__swsetup_r>
 8001464:	2800      	cmp	r0, #0
 8001466:	d00d      	beq.n	8001484 <_vfiprintf_r+0x60>
 8001468:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800146a:	07db      	lsls	r3, r3, #31
 800146c:	d503      	bpl.n	8001476 <_vfiprintf_r+0x52>
 800146e:	2001      	movs	r0, #1
 8001470:	4240      	negs	r0, r0
 8001472:	b021      	add	sp, #132	@ 0x84
 8001474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001476:	89bb      	ldrh	r3, [r7, #12]
 8001478:	059b      	lsls	r3, r3, #22
 800147a:	d4f8      	bmi.n	800146e <_vfiprintf_r+0x4a>
 800147c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800147e:	f7ff ffa9 	bl	80013d4 <__retarget_lock_release_recursive>
 8001482:	e7f4      	b.n	800146e <_vfiprintf_r+0x4a>
 8001484:	2300      	movs	r3, #0
 8001486:	ac08      	add	r4, sp, #32
 8001488:	6163      	str	r3, [r4, #20]
 800148a:	3320      	adds	r3, #32
 800148c:	7663      	strb	r3, [r4, #25]
 800148e:	3310      	adds	r3, #16
 8001490:	76a3      	strb	r3, [r4, #26]
 8001492:	9607      	str	r6, [sp, #28]
 8001494:	002e      	movs	r6, r5
 8001496:	7833      	ldrb	r3, [r6, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <_vfiprintf_r+0x7c>
 800149c:	2b25      	cmp	r3, #37	@ 0x25
 800149e:	d148      	bne.n	8001532 <_vfiprintf_r+0x10e>
 80014a0:	1b73      	subs	r3, r6, r5
 80014a2:	9305      	str	r3, [sp, #20]
 80014a4:	42ae      	cmp	r6, r5
 80014a6:	d00b      	beq.n	80014c0 <_vfiprintf_r+0x9c>
 80014a8:	002a      	movs	r2, r5
 80014aa:	0039      	movs	r1, r7
 80014ac:	9803      	ldr	r0, [sp, #12]
 80014ae:	f7ff ffa7 	bl	8001400 <__sfputs_r>
 80014b2:	3001      	adds	r0, #1
 80014b4:	d100      	bne.n	80014b8 <_vfiprintf_r+0x94>
 80014b6:	e0ae      	b.n	8001616 <_vfiprintf_r+0x1f2>
 80014b8:	6963      	ldr	r3, [r4, #20]
 80014ba:	9a05      	ldr	r2, [sp, #20]
 80014bc:	189b      	adds	r3, r3, r2
 80014be:	6163      	str	r3, [r4, #20]
 80014c0:	7833      	ldrb	r3, [r6, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d100      	bne.n	80014c8 <_vfiprintf_r+0xa4>
 80014c6:	e0a6      	b.n	8001616 <_vfiprintf_r+0x1f2>
 80014c8:	2201      	movs	r2, #1
 80014ca:	2300      	movs	r3, #0
 80014cc:	4252      	negs	r2, r2
 80014ce:	6062      	str	r2, [r4, #4]
 80014d0:	a904      	add	r1, sp, #16
 80014d2:	3254      	adds	r2, #84	@ 0x54
 80014d4:	1852      	adds	r2, r2, r1
 80014d6:	1c75      	adds	r5, r6, #1
 80014d8:	6023      	str	r3, [r4, #0]
 80014da:	60e3      	str	r3, [r4, #12]
 80014dc:	60a3      	str	r3, [r4, #8]
 80014de:	7013      	strb	r3, [r2, #0]
 80014e0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80014e2:	4b59      	ldr	r3, [pc, #356]	@ (8001648 <_vfiprintf_r+0x224>)
 80014e4:	2205      	movs	r2, #5
 80014e6:	0018      	movs	r0, r3
 80014e8:	7829      	ldrb	r1, [r5, #0]
 80014ea:	9305      	str	r3, [sp, #20]
 80014ec:	f000 fd74 	bl	8001fd8 <memchr>
 80014f0:	1c6e      	adds	r6, r5, #1
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d11f      	bne.n	8001536 <_vfiprintf_r+0x112>
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	06d3      	lsls	r3, r2, #27
 80014fa:	d504      	bpl.n	8001506 <_vfiprintf_r+0xe2>
 80014fc:	2353      	movs	r3, #83	@ 0x53
 80014fe:	a904      	add	r1, sp, #16
 8001500:	185b      	adds	r3, r3, r1
 8001502:	2120      	movs	r1, #32
 8001504:	7019      	strb	r1, [r3, #0]
 8001506:	0713      	lsls	r3, r2, #28
 8001508:	d504      	bpl.n	8001514 <_vfiprintf_r+0xf0>
 800150a:	2353      	movs	r3, #83	@ 0x53
 800150c:	a904      	add	r1, sp, #16
 800150e:	185b      	adds	r3, r3, r1
 8001510:	212b      	movs	r1, #43	@ 0x2b
 8001512:	7019      	strb	r1, [r3, #0]
 8001514:	782b      	ldrb	r3, [r5, #0]
 8001516:	2b2a      	cmp	r3, #42	@ 0x2a
 8001518:	d016      	beq.n	8001548 <_vfiprintf_r+0x124>
 800151a:	002e      	movs	r6, r5
 800151c:	2100      	movs	r1, #0
 800151e:	200a      	movs	r0, #10
 8001520:	68e3      	ldr	r3, [r4, #12]
 8001522:	7832      	ldrb	r2, [r6, #0]
 8001524:	1c75      	adds	r5, r6, #1
 8001526:	3a30      	subs	r2, #48	@ 0x30
 8001528:	2a09      	cmp	r2, #9
 800152a:	d950      	bls.n	80015ce <_vfiprintf_r+0x1aa>
 800152c:	2900      	cmp	r1, #0
 800152e:	d111      	bne.n	8001554 <_vfiprintf_r+0x130>
 8001530:	e017      	b.n	8001562 <_vfiprintf_r+0x13e>
 8001532:	3601      	adds	r6, #1
 8001534:	e7af      	b.n	8001496 <_vfiprintf_r+0x72>
 8001536:	9b05      	ldr	r3, [sp, #20]
 8001538:	6822      	ldr	r2, [r4, #0]
 800153a:	1ac0      	subs	r0, r0, r3
 800153c:	2301      	movs	r3, #1
 800153e:	4083      	lsls	r3, r0
 8001540:	4313      	orrs	r3, r2
 8001542:	0035      	movs	r5, r6
 8001544:	6023      	str	r3, [r4, #0]
 8001546:	e7cc      	b.n	80014e2 <_vfiprintf_r+0xbe>
 8001548:	9b07      	ldr	r3, [sp, #28]
 800154a:	1d19      	adds	r1, r3, #4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	9107      	str	r1, [sp, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db01      	blt.n	8001558 <_vfiprintf_r+0x134>
 8001554:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001556:	e004      	b.n	8001562 <_vfiprintf_r+0x13e>
 8001558:	425b      	negs	r3, r3
 800155a:	60e3      	str	r3, [r4, #12]
 800155c:	2302      	movs	r3, #2
 800155e:	4313      	orrs	r3, r2
 8001560:	6023      	str	r3, [r4, #0]
 8001562:	7833      	ldrb	r3, [r6, #0]
 8001564:	2b2e      	cmp	r3, #46	@ 0x2e
 8001566:	d10c      	bne.n	8001582 <_vfiprintf_r+0x15e>
 8001568:	7873      	ldrb	r3, [r6, #1]
 800156a:	2b2a      	cmp	r3, #42	@ 0x2a
 800156c:	d134      	bne.n	80015d8 <_vfiprintf_r+0x1b4>
 800156e:	9b07      	ldr	r3, [sp, #28]
 8001570:	3602      	adds	r6, #2
 8001572:	1d1a      	adds	r2, r3, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	9207      	str	r2, [sp, #28]
 8001578:	2b00      	cmp	r3, #0
 800157a:	da01      	bge.n	8001580 <_vfiprintf_r+0x15c>
 800157c:	2301      	movs	r3, #1
 800157e:	425b      	negs	r3, r3
 8001580:	9309      	str	r3, [sp, #36]	@ 0x24
 8001582:	4d32      	ldr	r5, [pc, #200]	@ (800164c <_vfiprintf_r+0x228>)
 8001584:	2203      	movs	r2, #3
 8001586:	0028      	movs	r0, r5
 8001588:	7831      	ldrb	r1, [r6, #0]
 800158a:	f000 fd25 	bl	8001fd8 <memchr>
 800158e:	2800      	cmp	r0, #0
 8001590:	d006      	beq.n	80015a0 <_vfiprintf_r+0x17c>
 8001592:	2340      	movs	r3, #64	@ 0x40
 8001594:	1b40      	subs	r0, r0, r5
 8001596:	4083      	lsls	r3, r0
 8001598:	6822      	ldr	r2, [r4, #0]
 800159a:	3601      	adds	r6, #1
 800159c:	4313      	orrs	r3, r2
 800159e:	6023      	str	r3, [r4, #0]
 80015a0:	7831      	ldrb	r1, [r6, #0]
 80015a2:	2206      	movs	r2, #6
 80015a4:	482a      	ldr	r0, [pc, #168]	@ (8001650 <_vfiprintf_r+0x22c>)
 80015a6:	1c75      	adds	r5, r6, #1
 80015a8:	7621      	strb	r1, [r4, #24]
 80015aa:	f000 fd15 	bl	8001fd8 <memchr>
 80015ae:	2800      	cmp	r0, #0
 80015b0:	d040      	beq.n	8001634 <_vfiprintf_r+0x210>
 80015b2:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <_vfiprintf_r+0x230>)
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d122      	bne.n	80015fe <_vfiprintf_r+0x1da>
 80015b8:	2207      	movs	r2, #7
 80015ba:	9b07      	ldr	r3, [sp, #28]
 80015bc:	3307      	adds	r3, #7
 80015be:	4393      	bics	r3, r2
 80015c0:	3308      	adds	r3, #8
 80015c2:	9307      	str	r3, [sp, #28]
 80015c4:	6963      	ldr	r3, [r4, #20]
 80015c6:	9a04      	ldr	r2, [sp, #16]
 80015c8:	189b      	adds	r3, r3, r2
 80015ca:	6163      	str	r3, [r4, #20]
 80015cc:	e762      	b.n	8001494 <_vfiprintf_r+0x70>
 80015ce:	4343      	muls	r3, r0
 80015d0:	002e      	movs	r6, r5
 80015d2:	2101      	movs	r1, #1
 80015d4:	189b      	adds	r3, r3, r2
 80015d6:	e7a4      	b.n	8001522 <_vfiprintf_r+0xfe>
 80015d8:	2300      	movs	r3, #0
 80015da:	200a      	movs	r0, #10
 80015dc:	0019      	movs	r1, r3
 80015de:	3601      	adds	r6, #1
 80015e0:	6063      	str	r3, [r4, #4]
 80015e2:	7832      	ldrb	r2, [r6, #0]
 80015e4:	1c75      	adds	r5, r6, #1
 80015e6:	3a30      	subs	r2, #48	@ 0x30
 80015e8:	2a09      	cmp	r2, #9
 80015ea:	d903      	bls.n	80015f4 <_vfiprintf_r+0x1d0>
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0c8      	beq.n	8001582 <_vfiprintf_r+0x15e>
 80015f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80015f2:	e7c6      	b.n	8001582 <_vfiprintf_r+0x15e>
 80015f4:	4341      	muls	r1, r0
 80015f6:	002e      	movs	r6, r5
 80015f8:	2301      	movs	r3, #1
 80015fa:	1889      	adds	r1, r1, r2
 80015fc:	e7f1      	b.n	80015e2 <_vfiprintf_r+0x1be>
 80015fe:	aa07      	add	r2, sp, #28
 8001600:	9200      	str	r2, [sp, #0]
 8001602:	0021      	movs	r1, r4
 8001604:	003a      	movs	r2, r7
 8001606:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <_vfiprintf_r+0x234>)
 8001608:	9803      	ldr	r0, [sp, #12]
 800160a:	e000      	b.n	800160e <_vfiprintf_r+0x1ea>
 800160c:	bf00      	nop
 800160e:	9004      	str	r0, [sp, #16]
 8001610:	9b04      	ldr	r3, [sp, #16]
 8001612:	3301      	adds	r3, #1
 8001614:	d1d6      	bne.n	80015c4 <_vfiprintf_r+0x1a0>
 8001616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001618:	07db      	lsls	r3, r3, #31
 800161a:	d405      	bmi.n	8001628 <_vfiprintf_r+0x204>
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	059b      	lsls	r3, r3, #22
 8001620:	d402      	bmi.n	8001628 <_vfiprintf_r+0x204>
 8001622:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001624:	f7ff fed6 	bl	80013d4 <__retarget_lock_release_recursive>
 8001628:	89bb      	ldrh	r3, [r7, #12]
 800162a:	065b      	lsls	r3, r3, #25
 800162c:	d500      	bpl.n	8001630 <_vfiprintf_r+0x20c>
 800162e:	e71e      	b.n	800146e <_vfiprintf_r+0x4a>
 8001630:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001632:	e71e      	b.n	8001472 <_vfiprintf_r+0x4e>
 8001634:	aa07      	add	r2, sp, #28
 8001636:	9200      	str	r2, [sp, #0]
 8001638:	0021      	movs	r1, r4
 800163a:	003a      	movs	r2, r7
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <_vfiprintf_r+0x234>)
 800163e:	9803      	ldr	r0, [sp, #12]
 8001640:	f000 f91e 	bl	8001880 <_printf_i>
 8001644:	e7e3      	b.n	800160e <_vfiprintf_r+0x1ea>
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	08002238 	.word	0x08002238
 800164c:	0800223e 	.word	0x0800223e
 8001650:	08002242 	.word	0x08002242
 8001654:	00000000 	.word	0x00000000
 8001658:	08001401 	.word	0x08001401

0800165c <sbrk_aligned>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	4e0f      	ldr	r6, [pc, #60]	@ (800169c <sbrk_aligned+0x40>)
 8001660:	000d      	movs	r5, r1
 8001662:	6831      	ldr	r1, [r6, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	2900      	cmp	r1, #0
 8001668:	d102      	bne.n	8001670 <sbrk_aligned+0x14>
 800166a:	f000 fc8f 	bl	8001f8c <_sbrk_r>
 800166e:	6030      	str	r0, [r6, #0]
 8001670:	0029      	movs	r1, r5
 8001672:	0020      	movs	r0, r4
 8001674:	f000 fc8a 	bl	8001f8c <_sbrk_r>
 8001678:	1c43      	adds	r3, r0, #1
 800167a:	d103      	bne.n	8001684 <sbrk_aligned+0x28>
 800167c:	2501      	movs	r5, #1
 800167e:	426d      	negs	r5, r5
 8001680:	0028      	movs	r0, r5
 8001682:	bd70      	pop	{r4, r5, r6, pc}
 8001684:	2303      	movs	r3, #3
 8001686:	1cc5      	adds	r5, r0, #3
 8001688:	439d      	bics	r5, r3
 800168a:	42a8      	cmp	r0, r5
 800168c:	d0f8      	beq.n	8001680 <sbrk_aligned+0x24>
 800168e:	1a29      	subs	r1, r5, r0
 8001690:	0020      	movs	r0, r4
 8001692:	f000 fc7b 	bl	8001f8c <_sbrk_r>
 8001696:	3001      	adds	r0, #1
 8001698:	d1f2      	bne.n	8001680 <sbrk_aligned+0x24>
 800169a:	e7ef      	b.n	800167c <sbrk_aligned+0x20>
 800169c:	20000238 	.word	0x20000238

080016a0 <_malloc_r>:
 80016a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016a2:	2203      	movs	r2, #3
 80016a4:	1ccb      	adds	r3, r1, #3
 80016a6:	4393      	bics	r3, r2
 80016a8:	3308      	adds	r3, #8
 80016aa:	0005      	movs	r5, r0
 80016ac:	001f      	movs	r7, r3
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	d234      	bcs.n	800171c <_malloc_r+0x7c>
 80016b2:	270c      	movs	r7, #12
 80016b4:	42b9      	cmp	r1, r7
 80016b6:	d833      	bhi.n	8001720 <_malloc_r+0x80>
 80016b8:	0028      	movs	r0, r5
 80016ba:	f000 faa1 	bl	8001c00 <__malloc_lock>
 80016be:	4e37      	ldr	r6, [pc, #220]	@ (800179c <_malloc_r+0xfc>)
 80016c0:	6833      	ldr	r3, [r6, #0]
 80016c2:	001c      	movs	r4, r3
 80016c4:	2c00      	cmp	r4, #0
 80016c6:	d12f      	bne.n	8001728 <_malloc_r+0x88>
 80016c8:	0039      	movs	r1, r7
 80016ca:	0028      	movs	r0, r5
 80016cc:	f7ff ffc6 	bl	800165c <sbrk_aligned>
 80016d0:	0004      	movs	r4, r0
 80016d2:	1c43      	adds	r3, r0, #1
 80016d4:	d15f      	bne.n	8001796 <_malloc_r+0xf6>
 80016d6:	6834      	ldr	r4, [r6, #0]
 80016d8:	9400      	str	r4, [sp, #0]
 80016da:	9b00      	ldr	r3, [sp, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d14a      	bne.n	8001776 <_malloc_r+0xd6>
 80016e0:	2c00      	cmp	r4, #0
 80016e2:	d052      	beq.n	800178a <_malloc_r+0xea>
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	0028      	movs	r0, r5
 80016e8:	18e3      	adds	r3, r4, r3
 80016ea:	9900      	ldr	r1, [sp, #0]
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	f000 fc4d 	bl	8001f8c <_sbrk_r>
 80016f2:	9b01      	ldr	r3, [sp, #4]
 80016f4:	4283      	cmp	r3, r0
 80016f6:	d148      	bne.n	800178a <_malloc_r+0xea>
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	0028      	movs	r0, r5
 80016fc:	1aff      	subs	r7, r7, r3
 80016fe:	0039      	movs	r1, r7
 8001700:	f7ff ffac 	bl	800165c <sbrk_aligned>
 8001704:	3001      	adds	r0, #1
 8001706:	d040      	beq.n	800178a <_malloc_r+0xea>
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	19db      	adds	r3, r3, r7
 800170c:	6023      	str	r3, [r4, #0]
 800170e:	6833      	ldr	r3, [r6, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	2a00      	cmp	r2, #0
 8001714:	d133      	bne.n	800177e <_malloc_r+0xde>
 8001716:	9b00      	ldr	r3, [sp, #0]
 8001718:	6033      	str	r3, [r6, #0]
 800171a:	e019      	b.n	8001750 <_malloc_r+0xb0>
 800171c:	2b00      	cmp	r3, #0
 800171e:	dac9      	bge.n	80016b4 <_malloc_r+0x14>
 8001720:	230c      	movs	r3, #12
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	2000      	movs	r0, #0
 8001726:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001728:	6821      	ldr	r1, [r4, #0]
 800172a:	1bc9      	subs	r1, r1, r7
 800172c:	d420      	bmi.n	8001770 <_malloc_r+0xd0>
 800172e:	290b      	cmp	r1, #11
 8001730:	d90a      	bls.n	8001748 <_malloc_r+0xa8>
 8001732:	19e2      	adds	r2, r4, r7
 8001734:	6027      	str	r7, [r4, #0]
 8001736:	42a3      	cmp	r3, r4
 8001738:	d104      	bne.n	8001744 <_malloc_r+0xa4>
 800173a:	6032      	str	r2, [r6, #0]
 800173c:	6863      	ldr	r3, [r4, #4]
 800173e:	6011      	str	r1, [r2, #0]
 8001740:	6053      	str	r3, [r2, #4]
 8001742:	e005      	b.n	8001750 <_malloc_r+0xb0>
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	e7f9      	b.n	800173c <_malloc_r+0x9c>
 8001748:	6862      	ldr	r2, [r4, #4]
 800174a:	42a3      	cmp	r3, r4
 800174c:	d10e      	bne.n	800176c <_malloc_r+0xcc>
 800174e:	6032      	str	r2, [r6, #0]
 8001750:	0028      	movs	r0, r5
 8001752:	f000 fa5d 	bl	8001c10 <__malloc_unlock>
 8001756:	0020      	movs	r0, r4
 8001758:	2207      	movs	r2, #7
 800175a:	300b      	adds	r0, #11
 800175c:	1d23      	adds	r3, r4, #4
 800175e:	4390      	bics	r0, r2
 8001760:	1ac2      	subs	r2, r0, r3
 8001762:	4298      	cmp	r0, r3
 8001764:	d0df      	beq.n	8001726 <_malloc_r+0x86>
 8001766:	1a1b      	subs	r3, r3, r0
 8001768:	50a3      	str	r3, [r4, r2]
 800176a:	e7dc      	b.n	8001726 <_malloc_r+0x86>
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	e7ef      	b.n	8001750 <_malloc_r+0xb0>
 8001770:	0023      	movs	r3, r4
 8001772:	6864      	ldr	r4, [r4, #4]
 8001774:	e7a6      	b.n	80016c4 <_malloc_r+0x24>
 8001776:	9c00      	ldr	r4, [sp, #0]
 8001778:	6863      	ldr	r3, [r4, #4]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	e7ad      	b.n	80016da <_malloc_r+0x3a>
 800177e:	001a      	movs	r2, r3
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	42a3      	cmp	r3, r4
 8001784:	d1fb      	bne.n	800177e <_malloc_r+0xde>
 8001786:	2300      	movs	r3, #0
 8001788:	e7da      	b.n	8001740 <_malloc_r+0xa0>
 800178a:	230c      	movs	r3, #12
 800178c:	0028      	movs	r0, r5
 800178e:	602b      	str	r3, [r5, #0]
 8001790:	f000 fa3e 	bl	8001c10 <__malloc_unlock>
 8001794:	e7c6      	b.n	8001724 <_malloc_r+0x84>
 8001796:	6007      	str	r7, [r0, #0]
 8001798:	e7da      	b.n	8001750 <_malloc_r+0xb0>
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	2000023c 	.word	0x2000023c

080017a0 <_printf_common>:
 80017a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017a2:	0016      	movs	r6, r2
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	688a      	ldr	r2, [r1, #8]
 80017a8:	690b      	ldr	r3, [r1, #16]
 80017aa:	000c      	movs	r4, r1
 80017ac:	9000      	str	r0, [sp, #0]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	da00      	bge.n	80017b4 <_printf_common+0x14>
 80017b2:	0013      	movs	r3, r2
 80017b4:	0022      	movs	r2, r4
 80017b6:	6033      	str	r3, [r6, #0]
 80017b8:	3243      	adds	r2, #67	@ 0x43
 80017ba:	7812      	ldrb	r2, [r2, #0]
 80017bc:	2a00      	cmp	r2, #0
 80017be:	d001      	beq.n	80017c4 <_printf_common+0x24>
 80017c0:	3301      	adds	r3, #1
 80017c2:	6033      	str	r3, [r6, #0]
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	069b      	lsls	r3, r3, #26
 80017c8:	d502      	bpl.n	80017d0 <_printf_common+0x30>
 80017ca:	6833      	ldr	r3, [r6, #0]
 80017cc:	3302      	adds	r3, #2
 80017ce:	6033      	str	r3, [r6, #0]
 80017d0:	6822      	ldr	r2, [r4, #0]
 80017d2:	2306      	movs	r3, #6
 80017d4:	0015      	movs	r5, r2
 80017d6:	401d      	ands	r5, r3
 80017d8:	421a      	tst	r2, r3
 80017da:	d027      	beq.n	800182c <_printf_common+0x8c>
 80017dc:	0023      	movs	r3, r4
 80017de:	3343      	adds	r3, #67	@ 0x43
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	4193      	sbcs	r3, r2
 80017e6:	6822      	ldr	r2, [r4, #0]
 80017e8:	0692      	lsls	r2, r2, #26
 80017ea:	d430      	bmi.n	800184e <_printf_common+0xae>
 80017ec:	0022      	movs	r2, r4
 80017ee:	9901      	ldr	r1, [sp, #4]
 80017f0:	9800      	ldr	r0, [sp, #0]
 80017f2:	9d08      	ldr	r5, [sp, #32]
 80017f4:	3243      	adds	r2, #67	@ 0x43
 80017f6:	47a8      	blx	r5
 80017f8:	3001      	adds	r0, #1
 80017fa:	d025      	beq.n	8001848 <_printf_common+0xa8>
 80017fc:	2206      	movs	r2, #6
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	2500      	movs	r5, #0
 8001802:	4013      	ands	r3, r2
 8001804:	2b04      	cmp	r3, #4
 8001806:	d105      	bne.n	8001814 <_printf_common+0x74>
 8001808:	6833      	ldr	r3, [r6, #0]
 800180a:	68e5      	ldr	r5, [r4, #12]
 800180c:	1aed      	subs	r5, r5, r3
 800180e:	43eb      	mvns	r3, r5
 8001810:	17db      	asrs	r3, r3, #31
 8001812:	401d      	ands	r5, r3
 8001814:	68a3      	ldr	r3, [r4, #8]
 8001816:	6922      	ldr	r2, [r4, #16]
 8001818:	4293      	cmp	r3, r2
 800181a:	dd01      	ble.n	8001820 <_printf_common+0x80>
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	18ed      	adds	r5, r5, r3
 8001820:	2600      	movs	r6, #0
 8001822:	42b5      	cmp	r5, r6
 8001824:	d120      	bne.n	8001868 <_printf_common+0xc8>
 8001826:	2000      	movs	r0, #0
 8001828:	e010      	b.n	800184c <_printf_common+0xac>
 800182a:	3501      	adds	r5, #1
 800182c:	68e3      	ldr	r3, [r4, #12]
 800182e:	6832      	ldr	r2, [r6, #0]
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	42ab      	cmp	r3, r5
 8001834:	ddd2      	ble.n	80017dc <_printf_common+0x3c>
 8001836:	0022      	movs	r2, r4
 8001838:	2301      	movs	r3, #1
 800183a:	9901      	ldr	r1, [sp, #4]
 800183c:	9800      	ldr	r0, [sp, #0]
 800183e:	9f08      	ldr	r7, [sp, #32]
 8001840:	3219      	adds	r2, #25
 8001842:	47b8      	blx	r7
 8001844:	3001      	adds	r0, #1
 8001846:	d1f0      	bne.n	800182a <_printf_common+0x8a>
 8001848:	2001      	movs	r0, #1
 800184a:	4240      	negs	r0, r0
 800184c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800184e:	2030      	movs	r0, #48	@ 0x30
 8001850:	18e1      	adds	r1, r4, r3
 8001852:	3143      	adds	r1, #67	@ 0x43
 8001854:	7008      	strb	r0, [r1, #0]
 8001856:	0021      	movs	r1, r4
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	3145      	adds	r1, #69	@ 0x45
 800185c:	7809      	ldrb	r1, [r1, #0]
 800185e:	18a2      	adds	r2, r4, r2
 8001860:	3243      	adds	r2, #67	@ 0x43
 8001862:	3302      	adds	r3, #2
 8001864:	7011      	strb	r1, [r2, #0]
 8001866:	e7c1      	b.n	80017ec <_printf_common+0x4c>
 8001868:	0022      	movs	r2, r4
 800186a:	2301      	movs	r3, #1
 800186c:	9901      	ldr	r1, [sp, #4]
 800186e:	9800      	ldr	r0, [sp, #0]
 8001870:	9f08      	ldr	r7, [sp, #32]
 8001872:	321a      	adds	r2, #26
 8001874:	47b8      	blx	r7
 8001876:	3001      	adds	r0, #1
 8001878:	d0e6      	beq.n	8001848 <_printf_common+0xa8>
 800187a:	3601      	adds	r6, #1
 800187c:	e7d1      	b.n	8001822 <_printf_common+0x82>
	...

08001880 <_printf_i>:
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	b08b      	sub	sp, #44	@ 0x2c
 8001884:	9206      	str	r2, [sp, #24]
 8001886:	000a      	movs	r2, r1
 8001888:	3243      	adds	r2, #67	@ 0x43
 800188a:	9307      	str	r3, [sp, #28]
 800188c:	9005      	str	r0, [sp, #20]
 800188e:	9203      	str	r2, [sp, #12]
 8001890:	7e0a      	ldrb	r2, [r1, #24]
 8001892:	000c      	movs	r4, r1
 8001894:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8001896:	2a78      	cmp	r2, #120	@ 0x78
 8001898:	d809      	bhi.n	80018ae <_printf_i+0x2e>
 800189a:	2a62      	cmp	r2, #98	@ 0x62
 800189c:	d80b      	bhi.n	80018b6 <_printf_i+0x36>
 800189e:	2a00      	cmp	r2, #0
 80018a0:	d100      	bne.n	80018a4 <_printf_i+0x24>
 80018a2:	e0bc      	b.n	8001a1e <_printf_i+0x19e>
 80018a4:	497b      	ldr	r1, [pc, #492]	@ (8001a94 <_printf_i+0x214>)
 80018a6:	9104      	str	r1, [sp, #16]
 80018a8:	2a58      	cmp	r2, #88	@ 0x58
 80018aa:	d100      	bne.n	80018ae <_printf_i+0x2e>
 80018ac:	e090      	b.n	80019d0 <_printf_i+0x150>
 80018ae:	0025      	movs	r5, r4
 80018b0:	3542      	adds	r5, #66	@ 0x42
 80018b2:	702a      	strb	r2, [r5, #0]
 80018b4:	e022      	b.n	80018fc <_printf_i+0x7c>
 80018b6:	0010      	movs	r0, r2
 80018b8:	3863      	subs	r0, #99	@ 0x63
 80018ba:	2815      	cmp	r0, #21
 80018bc:	d8f7      	bhi.n	80018ae <_printf_i+0x2e>
 80018be:	f7fe fc2d 	bl	800011c <__gnu_thumb1_case_shi>
 80018c2:	0016      	.short	0x0016
 80018c4:	fff6001f 	.word	0xfff6001f
 80018c8:	fff6fff6 	.word	0xfff6fff6
 80018cc:	001ffff6 	.word	0x001ffff6
 80018d0:	fff6fff6 	.word	0xfff6fff6
 80018d4:	fff6fff6 	.word	0xfff6fff6
 80018d8:	003600a1 	.word	0x003600a1
 80018dc:	fff60080 	.word	0xfff60080
 80018e0:	00b2fff6 	.word	0x00b2fff6
 80018e4:	0036fff6 	.word	0x0036fff6
 80018e8:	fff6fff6 	.word	0xfff6fff6
 80018ec:	0084      	.short	0x0084
 80018ee:	0025      	movs	r5, r4
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	3542      	adds	r5, #66	@ 0x42
 80018f4:	1d11      	adds	r1, r2, #4
 80018f6:	6019      	str	r1, [r3, #0]
 80018f8:	6813      	ldr	r3, [r2, #0]
 80018fa:	702b      	strb	r3, [r5, #0]
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0a0      	b.n	8001a42 <_printf_i+0x1c2>
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	6809      	ldr	r1, [r1, #0]
 8001904:	1d02      	adds	r2, r0, #4
 8001906:	060d      	lsls	r5, r1, #24
 8001908:	d50b      	bpl.n	8001922 <_printf_i+0xa2>
 800190a:	6806      	ldr	r6, [r0, #0]
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	2e00      	cmp	r6, #0
 8001910:	da03      	bge.n	800191a <_printf_i+0x9a>
 8001912:	232d      	movs	r3, #45	@ 0x2d
 8001914:	9a03      	ldr	r2, [sp, #12]
 8001916:	4276      	negs	r6, r6
 8001918:	7013      	strb	r3, [r2, #0]
 800191a:	4b5e      	ldr	r3, [pc, #376]	@ (8001a94 <_printf_i+0x214>)
 800191c:	270a      	movs	r7, #10
 800191e:	9304      	str	r3, [sp, #16]
 8001920:	e018      	b.n	8001954 <_printf_i+0xd4>
 8001922:	6806      	ldr	r6, [r0, #0]
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	0649      	lsls	r1, r1, #25
 8001928:	d5f1      	bpl.n	800190e <_printf_i+0x8e>
 800192a:	b236      	sxth	r6, r6
 800192c:	e7ef      	b.n	800190e <_printf_i+0x8e>
 800192e:	6808      	ldr	r0, [r1, #0]
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	c940      	ldmia	r1!, {r6}
 8001934:	0605      	lsls	r5, r0, #24
 8001936:	d402      	bmi.n	800193e <_printf_i+0xbe>
 8001938:	0640      	lsls	r0, r0, #25
 800193a:	d500      	bpl.n	800193e <_printf_i+0xbe>
 800193c:	b2b6      	uxth	r6, r6
 800193e:	6019      	str	r1, [r3, #0]
 8001940:	4b54      	ldr	r3, [pc, #336]	@ (8001a94 <_printf_i+0x214>)
 8001942:	270a      	movs	r7, #10
 8001944:	9304      	str	r3, [sp, #16]
 8001946:	2a6f      	cmp	r2, #111	@ 0x6f
 8001948:	d100      	bne.n	800194c <_printf_i+0xcc>
 800194a:	3f02      	subs	r7, #2
 800194c:	0023      	movs	r3, r4
 800194e:	2200      	movs	r2, #0
 8001950:	3343      	adds	r3, #67	@ 0x43
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	6863      	ldr	r3, [r4, #4]
 8001956:	60a3      	str	r3, [r4, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db03      	blt.n	8001964 <_printf_i+0xe4>
 800195c:	2104      	movs	r1, #4
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	438a      	bics	r2, r1
 8001962:	6022      	str	r2, [r4, #0]
 8001964:	2e00      	cmp	r6, #0
 8001966:	d102      	bne.n	800196e <_printf_i+0xee>
 8001968:	9d03      	ldr	r5, [sp, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00c      	beq.n	8001988 <_printf_i+0x108>
 800196e:	9d03      	ldr	r5, [sp, #12]
 8001970:	0030      	movs	r0, r6
 8001972:	0039      	movs	r1, r7
 8001974:	f7fe fc62 	bl	800023c <__aeabi_uidivmod>
 8001978:	9b04      	ldr	r3, [sp, #16]
 800197a:	3d01      	subs	r5, #1
 800197c:	5c5b      	ldrb	r3, [r3, r1]
 800197e:	702b      	strb	r3, [r5, #0]
 8001980:	0033      	movs	r3, r6
 8001982:	0006      	movs	r6, r0
 8001984:	429f      	cmp	r7, r3
 8001986:	d9f3      	bls.n	8001970 <_printf_i+0xf0>
 8001988:	2f08      	cmp	r7, #8
 800198a:	d109      	bne.n	80019a0 <_printf_i+0x120>
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	07db      	lsls	r3, r3, #31
 8001990:	d506      	bpl.n	80019a0 <_printf_i+0x120>
 8001992:	6862      	ldr	r2, [r4, #4]
 8001994:	6923      	ldr	r3, [r4, #16]
 8001996:	429a      	cmp	r2, r3
 8001998:	dc02      	bgt.n	80019a0 <_printf_i+0x120>
 800199a:	2330      	movs	r3, #48	@ 0x30
 800199c:	3d01      	subs	r5, #1
 800199e:	702b      	strb	r3, [r5, #0]
 80019a0:	9b03      	ldr	r3, [sp, #12]
 80019a2:	1b5b      	subs	r3, r3, r5
 80019a4:	6123      	str	r3, [r4, #16]
 80019a6:	9b07      	ldr	r3, [sp, #28]
 80019a8:	0021      	movs	r1, r4
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	9805      	ldr	r0, [sp, #20]
 80019ae:	9b06      	ldr	r3, [sp, #24]
 80019b0:	aa09      	add	r2, sp, #36	@ 0x24
 80019b2:	f7ff fef5 	bl	80017a0 <_printf_common>
 80019b6:	3001      	adds	r0, #1
 80019b8:	d148      	bne.n	8001a4c <_printf_i+0x1cc>
 80019ba:	2001      	movs	r0, #1
 80019bc:	4240      	negs	r0, r0
 80019be:	b00b      	add	sp, #44	@ 0x2c
 80019c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c2:	2220      	movs	r2, #32
 80019c4:	6809      	ldr	r1, [r1, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	6022      	str	r2, [r4, #0]
 80019ca:	2278      	movs	r2, #120	@ 0x78
 80019cc:	4932      	ldr	r1, [pc, #200]	@ (8001a98 <_printf_i+0x218>)
 80019ce:	9104      	str	r1, [sp, #16]
 80019d0:	0021      	movs	r1, r4
 80019d2:	3145      	adds	r1, #69	@ 0x45
 80019d4:	700a      	strb	r2, [r1, #0]
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	6822      	ldr	r2, [r4, #0]
 80019da:	c940      	ldmia	r1!, {r6}
 80019dc:	0610      	lsls	r0, r2, #24
 80019de:	d402      	bmi.n	80019e6 <_printf_i+0x166>
 80019e0:	0650      	lsls	r0, r2, #25
 80019e2:	d500      	bpl.n	80019e6 <_printf_i+0x166>
 80019e4:	b2b6      	uxth	r6, r6
 80019e6:	6019      	str	r1, [r3, #0]
 80019e8:	07d3      	lsls	r3, r2, #31
 80019ea:	d502      	bpl.n	80019f2 <_printf_i+0x172>
 80019ec:	2320      	movs	r3, #32
 80019ee:	4313      	orrs	r3, r2
 80019f0:	6023      	str	r3, [r4, #0]
 80019f2:	2e00      	cmp	r6, #0
 80019f4:	d001      	beq.n	80019fa <_printf_i+0x17a>
 80019f6:	2710      	movs	r7, #16
 80019f8:	e7a8      	b.n	800194c <_printf_i+0xcc>
 80019fa:	2220      	movs	r2, #32
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	4393      	bics	r3, r2
 8001a00:	6023      	str	r3, [r4, #0]
 8001a02:	e7f8      	b.n	80019f6 <_printf_i+0x176>
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	680d      	ldr	r5, [r1, #0]
 8001a08:	1d10      	adds	r0, r2, #4
 8001a0a:	6949      	ldr	r1, [r1, #20]
 8001a0c:	6018      	str	r0, [r3, #0]
 8001a0e:	6813      	ldr	r3, [r2, #0]
 8001a10:	062e      	lsls	r6, r5, #24
 8001a12:	d501      	bpl.n	8001a18 <_printf_i+0x198>
 8001a14:	6019      	str	r1, [r3, #0]
 8001a16:	e002      	b.n	8001a1e <_printf_i+0x19e>
 8001a18:	066d      	lsls	r5, r5, #25
 8001a1a:	d5fb      	bpl.n	8001a14 <_printf_i+0x194>
 8001a1c:	8019      	strh	r1, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9d03      	ldr	r5, [sp, #12]
 8001a22:	6123      	str	r3, [r4, #16]
 8001a24:	e7bf      	b.n	80019a6 <_printf_i+0x126>
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	1d11      	adds	r1, r2, #4
 8001a2a:	6019      	str	r1, [r3, #0]
 8001a2c:	6815      	ldr	r5, [r2, #0]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	0028      	movs	r0, r5
 8001a32:	6862      	ldr	r2, [r4, #4]
 8001a34:	f000 fad0 	bl	8001fd8 <memchr>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d001      	beq.n	8001a40 <_printf_i+0x1c0>
 8001a3c:	1b40      	subs	r0, r0, r5
 8001a3e:	6060      	str	r0, [r4, #4]
 8001a40:	6863      	ldr	r3, [r4, #4]
 8001a42:	6123      	str	r3, [r4, #16]
 8001a44:	2300      	movs	r3, #0
 8001a46:	9a03      	ldr	r2, [sp, #12]
 8001a48:	7013      	strb	r3, [r2, #0]
 8001a4a:	e7ac      	b.n	80019a6 <_printf_i+0x126>
 8001a4c:	002a      	movs	r2, r5
 8001a4e:	6923      	ldr	r3, [r4, #16]
 8001a50:	9906      	ldr	r1, [sp, #24]
 8001a52:	9805      	ldr	r0, [sp, #20]
 8001a54:	9d07      	ldr	r5, [sp, #28]
 8001a56:	47a8      	blx	r5
 8001a58:	3001      	adds	r0, #1
 8001a5a:	d0ae      	beq.n	80019ba <_printf_i+0x13a>
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	079b      	lsls	r3, r3, #30
 8001a60:	d415      	bmi.n	8001a8e <_printf_i+0x20e>
 8001a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a64:	68e0      	ldr	r0, [r4, #12]
 8001a66:	4298      	cmp	r0, r3
 8001a68:	daa9      	bge.n	80019be <_printf_i+0x13e>
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	e7a7      	b.n	80019be <_printf_i+0x13e>
 8001a6e:	0022      	movs	r2, r4
 8001a70:	2301      	movs	r3, #1
 8001a72:	9906      	ldr	r1, [sp, #24]
 8001a74:	9805      	ldr	r0, [sp, #20]
 8001a76:	9e07      	ldr	r6, [sp, #28]
 8001a78:	3219      	adds	r2, #25
 8001a7a:	47b0      	blx	r6
 8001a7c:	3001      	adds	r0, #1
 8001a7e:	d09c      	beq.n	80019ba <_printf_i+0x13a>
 8001a80:	3501      	adds	r5, #1
 8001a82:	68e3      	ldr	r3, [r4, #12]
 8001a84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	42ab      	cmp	r3, r5
 8001a8a:	dcf0      	bgt.n	8001a6e <_printf_i+0x1ee>
 8001a8c:	e7e9      	b.n	8001a62 <_printf_i+0x1e2>
 8001a8e:	2500      	movs	r5, #0
 8001a90:	e7f7      	b.n	8001a82 <_printf_i+0x202>
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	08002249 	.word	0x08002249
 8001a98:	0800225a 	.word	0x0800225a

08001a9c <__sflush_r>:
 8001a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	5e8b      	ldrsh	r3, [r1, r2]
 8001aa2:	0005      	movs	r5, r0
 8001aa4:	000c      	movs	r4, r1
 8001aa6:	071a      	lsls	r2, r3, #28
 8001aa8:	d456      	bmi.n	8001b58 <__sflush_r+0xbc>
 8001aaa:	684a      	ldr	r2, [r1, #4]
 8001aac:	2a00      	cmp	r2, #0
 8001aae:	dc02      	bgt.n	8001ab6 <__sflush_r+0x1a>
 8001ab0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8001ab2:	2a00      	cmp	r2, #0
 8001ab4:	dd4e      	ble.n	8001b54 <__sflush_r+0xb8>
 8001ab6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8001ab8:	2f00      	cmp	r7, #0
 8001aba:	d04b      	beq.n	8001b54 <__sflush_r+0xb8>
 8001abc:	2200      	movs	r2, #0
 8001abe:	2080      	movs	r0, #128	@ 0x80
 8001ac0:	682e      	ldr	r6, [r5, #0]
 8001ac2:	602a      	str	r2, [r5, #0]
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	0140      	lsls	r0, r0, #5
 8001ac8:	6a21      	ldr	r1, [r4, #32]
 8001aca:	4002      	ands	r2, r0
 8001acc:	4203      	tst	r3, r0
 8001ace:	d033      	beq.n	8001b38 <__sflush_r+0x9c>
 8001ad0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ad2:	89a3      	ldrh	r3, [r4, #12]
 8001ad4:	075b      	lsls	r3, r3, #29
 8001ad6:	d506      	bpl.n	8001ae6 <__sflush_r+0x4a>
 8001ad8:	6863      	ldr	r3, [r4, #4]
 8001ada:	1ad2      	subs	r2, r2, r3
 8001adc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <__sflush_r+0x4a>
 8001ae2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ae4:	1ad2      	subs	r2, r2, r3
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	0028      	movs	r0, r5
 8001aea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8001aec:	6a21      	ldr	r1, [r4, #32]
 8001aee:	47b8      	blx	r7
 8001af0:	89a2      	ldrh	r2, [r4, #12]
 8001af2:	1c43      	adds	r3, r0, #1
 8001af4:	d106      	bne.n	8001b04 <__sflush_r+0x68>
 8001af6:	6829      	ldr	r1, [r5, #0]
 8001af8:	291d      	cmp	r1, #29
 8001afa:	d846      	bhi.n	8001b8a <__sflush_r+0xee>
 8001afc:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <__sflush_r+0x108>)
 8001afe:	410b      	asrs	r3, r1
 8001b00:	07db      	lsls	r3, r3, #31
 8001b02:	d442      	bmi.n	8001b8a <__sflush_r+0xee>
 8001b04:	2300      	movs	r3, #0
 8001b06:	6063      	str	r3, [r4, #4]
 8001b08:	6923      	ldr	r3, [r4, #16]
 8001b0a:	6023      	str	r3, [r4, #0]
 8001b0c:	04d2      	lsls	r2, r2, #19
 8001b0e:	d505      	bpl.n	8001b1c <__sflush_r+0x80>
 8001b10:	1c43      	adds	r3, r0, #1
 8001b12:	d102      	bne.n	8001b1a <__sflush_r+0x7e>
 8001b14:	682b      	ldr	r3, [r5, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d100      	bne.n	8001b1c <__sflush_r+0x80>
 8001b1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b1e:	602e      	str	r6, [r5, #0]
 8001b20:	2900      	cmp	r1, #0
 8001b22:	d017      	beq.n	8001b54 <__sflush_r+0xb8>
 8001b24:	0023      	movs	r3, r4
 8001b26:	3344      	adds	r3, #68	@ 0x44
 8001b28:	4299      	cmp	r1, r3
 8001b2a:	d002      	beq.n	8001b32 <__sflush_r+0x96>
 8001b2c:	0028      	movs	r0, r5
 8001b2e:	f000 fa5f 	bl	8001ff0 <_free_r>
 8001b32:	2300      	movs	r3, #0
 8001b34:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b36:	e00d      	b.n	8001b54 <__sflush_r+0xb8>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	0028      	movs	r0, r5
 8001b3c:	47b8      	blx	r7
 8001b3e:	0002      	movs	r2, r0
 8001b40:	1c43      	adds	r3, r0, #1
 8001b42:	d1c6      	bne.n	8001ad2 <__sflush_r+0x36>
 8001b44:	682b      	ldr	r3, [r5, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0c3      	beq.n	8001ad2 <__sflush_r+0x36>
 8001b4a:	2b1d      	cmp	r3, #29
 8001b4c:	d001      	beq.n	8001b52 <__sflush_r+0xb6>
 8001b4e:	2b16      	cmp	r3, #22
 8001b50:	d11a      	bne.n	8001b88 <__sflush_r+0xec>
 8001b52:	602e      	str	r6, [r5, #0]
 8001b54:	2000      	movs	r0, #0
 8001b56:	e01e      	b.n	8001b96 <__sflush_r+0xfa>
 8001b58:	690e      	ldr	r6, [r1, #16]
 8001b5a:	2e00      	cmp	r6, #0
 8001b5c:	d0fa      	beq.n	8001b54 <__sflush_r+0xb8>
 8001b5e:	680f      	ldr	r7, [r1, #0]
 8001b60:	600e      	str	r6, [r1, #0]
 8001b62:	1bba      	subs	r2, r7, r6
 8001b64:	9201      	str	r2, [sp, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	079b      	lsls	r3, r3, #30
 8001b6a:	d100      	bne.n	8001b6e <__sflush_r+0xd2>
 8001b6c:	694a      	ldr	r2, [r1, #20]
 8001b6e:	60a2      	str	r2, [r4, #8]
 8001b70:	9b01      	ldr	r3, [sp, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	ddee      	ble.n	8001b54 <__sflush_r+0xb8>
 8001b76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b78:	0032      	movs	r2, r6
 8001b7a:	001f      	movs	r7, r3
 8001b7c:	0028      	movs	r0, r5
 8001b7e:	9b01      	ldr	r3, [sp, #4]
 8001b80:	6a21      	ldr	r1, [r4, #32]
 8001b82:	47b8      	blx	r7
 8001b84:	2800      	cmp	r0, #0
 8001b86:	dc07      	bgt.n	8001b98 <__sflush_r+0xfc>
 8001b88:	89a2      	ldrh	r2, [r4, #12]
 8001b8a:	2340      	movs	r3, #64	@ 0x40
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	81a3      	strh	r3, [r4, #12]
 8001b94:	4240      	negs	r0, r0
 8001b96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001b98:	9b01      	ldr	r3, [sp, #4]
 8001b9a:	1836      	adds	r6, r6, r0
 8001b9c:	1a1b      	subs	r3, r3, r0
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	e7e6      	b.n	8001b70 <__sflush_r+0xd4>
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	dfbffffe 	.word	0xdfbffffe

08001ba8 <_fflush_r>:
 8001ba8:	690b      	ldr	r3, [r1, #16]
 8001baa:	b570      	push	{r4, r5, r6, lr}
 8001bac:	0005      	movs	r5, r0
 8001bae:	000c      	movs	r4, r1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <_fflush_r+0x12>
 8001bb4:	2500      	movs	r5, #0
 8001bb6:	0028      	movs	r0, r5
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	d004      	beq.n	8001bc8 <_fflush_r+0x20>
 8001bbe:	6a03      	ldr	r3, [r0, #32]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <_fflush_r+0x20>
 8001bc4:	f7ff fb2e 	bl	8001224 <__sinit>
 8001bc8:	220c      	movs	r2, #12
 8001bca:	5ea3      	ldrsh	r3, [r4, r2]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f1      	beq.n	8001bb4 <_fflush_r+0xc>
 8001bd0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001bd2:	07d2      	lsls	r2, r2, #31
 8001bd4:	d404      	bmi.n	8001be0 <_fflush_r+0x38>
 8001bd6:	059b      	lsls	r3, r3, #22
 8001bd8:	d402      	bmi.n	8001be0 <_fflush_r+0x38>
 8001bda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bdc:	f7ff fbf9 	bl	80013d2 <__retarget_lock_acquire_recursive>
 8001be0:	0028      	movs	r0, r5
 8001be2:	0021      	movs	r1, r4
 8001be4:	f7ff ff5a 	bl	8001a9c <__sflush_r>
 8001be8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bea:	0005      	movs	r5, r0
 8001bec:	07db      	lsls	r3, r3, #31
 8001bee:	d4e2      	bmi.n	8001bb6 <_fflush_r+0xe>
 8001bf0:	89a3      	ldrh	r3, [r4, #12]
 8001bf2:	059b      	lsls	r3, r3, #22
 8001bf4:	d4df      	bmi.n	8001bb6 <_fflush_r+0xe>
 8001bf6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bf8:	f7ff fbec 	bl	80013d4 <__retarget_lock_release_recursive>
 8001bfc:	e7db      	b.n	8001bb6 <_fflush_r+0xe>
	...

08001c00 <__malloc_lock>:
 8001c00:	b510      	push	{r4, lr}
 8001c02:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <__malloc_lock+0xc>)
 8001c04:	f7ff fbe5 	bl	80013d2 <__retarget_lock_acquire_recursive>
 8001c08:	bd10      	pop	{r4, pc}
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	20000234 	.word	0x20000234

08001c10 <__malloc_unlock>:
 8001c10:	b510      	push	{r4, lr}
 8001c12:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <__malloc_unlock+0xc>)
 8001c14:	f7ff fbde 	bl	80013d4 <__retarget_lock_release_recursive>
 8001c18:	bd10      	pop	{r4, pc}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	20000234 	.word	0x20000234

08001c20 <__sread>:
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	000c      	movs	r4, r1
 8001c24:	250e      	movs	r5, #14
 8001c26:	5f49      	ldrsh	r1, [r1, r5]
 8001c28:	f000 f99c 	bl	8001f64 <_read_r>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	db03      	blt.n	8001c38 <__sread+0x18>
 8001c30:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001c32:	181b      	adds	r3, r3, r0
 8001c34:	6563      	str	r3, [r4, #84]	@ 0x54
 8001c36:	bd70      	pop	{r4, r5, r6, pc}
 8001c38:	89a3      	ldrh	r3, [r4, #12]
 8001c3a:	4a02      	ldr	r2, [pc, #8]	@ (8001c44 <__sread+0x24>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	81a3      	strh	r3, [r4, #12]
 8001c40:	e7f9      	b.n	8001c36 <__sread+0x16>
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	ffffefff 	.word	0xffffefff

08001c48 <__swrite>:
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4a:	001f      	movs	r7, r3
 8001c4c:	898b      	ldrh	r3, [r1, #12]
 8001c4e:	0005      	movs	r5, r0
 8001c50:	000c      	movs	r4, r1
 8001c52:	0016      	movs	r6, r2
 8001c54:	05db      	lsls	r3, r3, #23
 8001c56:	d505      	bpl.n	8001c64 <__swrite+0x1c>
 8001c58:	230e      	movs	r3, #14
 8001c5a:	5ec9      	ldrsh	r1, [r1, r3]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f000 f96c 	bl	8001f3c <_lseek_r>
 8001c64:	89a3      	ldrh	r3, [r4, #12]
 8001c66:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <__swrite+0x34>)
 8001c68:	0028      	movs	r0, r5
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	81a3      	strh	r3, [r4, #12]
 8001c6e:	0032      	movs	r2, r6
 8001c70:	230e      	movs	r3, #14
 8001c72:	5ee1      	ldrsh	r1, [r4, r3]
 8001c74:	003b      	movs	r3, r7
 8001c76:	f000 f99b 	bl	8001fb0 <_write_r>
 8001c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c7c:	ffffefff 	.word	0xffffefff

08001c80 <__sseek>:
 8001c80:	b570      	push	{r4, r5, r6, lr}
 8001c82:	000c      	movs	r4, r1
 8001c84:	250e      	movs	r5, #14
 8001c86:	5f49      	ldrsh	r1, [r1, r5]
 8001c88:	f000 f958 	bl	8001f3c <_lseek_r>
 8001c8c:	89a3      	ldrh	r3, [r4, #12]
 8001c8e:	1c42      	adds	r2, r0, #1
 8001c90:	d103      	bne.n	8001c9a <__sseek+0x1a>
 8001c92:	4a05      	ldr	r2, [pc, #20]	@ (8001ca8 <__sseek+0x28>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	81a3      	strh	r3, [r4, #12]
 8001c98:	bd70      	pop	{r4, r5, r6, pc}
 8001c9a:	2280      	movs	r2, #128	@ 0x80
 8001c9c:	0152      	lsls	r2, r2, #5
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	81a3      	strh	r3, [r4, #12]
 8001ca2:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ca4:	e7f8      	b.n	8001c98 <__sseek+0x18>
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	ffffefff 	.word	0xffffefff

08001cac <__sclose>:
 8001cac:	b510      	push	{r4, lr}
 8001cae:	230e      	movs	r3, #14
 8001cb0:	5ec9      	ldrsh	r1, [r1, r3]
 8001cb2:	f000 f90d 	bl	8001ed0 <_close_r>
 8001cb6:	bd10      	pop	{r4, pc}

08001cb8 <__swbuf_r>:
 8001cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cba:	0006      	movs	r6, r0
 8001cbc:	000d      	movs	r5, r1
 8001cbe:	0014      	movs	r4, r2
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d004      	beq.n	8001cce <__swbuf_r+0x16>
 8001cc4:	6a03      	ldr	r3, [r0, #32]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <__swbuf_r+0x16>
 8001cca:	f7ff faab 	bl	8001224 <__sinit>
 8001cce:	69a3      	ldr	r3, [r4, #24]
 8001cd0:	60a3      	str	r3, [r4, #8]
 8001cd2:	89a3      	ldrh	r3, [r4, #12]
 8001cd4:	071b      	lsls	r3, r3, #28
 8001cd6:	d502      	bpl.n	8001cde <__swbuf_r+0x26>
 8001cd8:	6923      	ldr	r3, [r4, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <__swbuf_r+0x3a>
 8001cde:	0021      	movs	r1, r4
 8001ce0:	0030      	movs	r0, r6
 8001ce2:	f000 f82b 	bl	8001d3c <__swsetup_r>
 8001ce6:	2800      	cmp	r0, #0
 8001ce8:	d003      	beq.n	8001cf2 <__swbuf_r+0x3a>
 8001cea:	2501      	movs	r5, #1
 8001cec:	426d      	negs	r5, r5
 8001cee:	0028      	movs	r0, r5
 8001cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cf2:	6923      	ldr	r3, [r4, #16]
 8001cf4:	6820      	ldr	r0, [r4, #0]
 8001cf6:	b2ef      	uxtb	r7, r5
 8001cf8:	1ac0      	subs	r0, r0, r3
 8001cfa:	6963      	ldr	r3, [r4, #20]
 8001cfc:	b2ed      	uxtb	r5, r5
 8001cfe:	4283      	cmp	r3, r0
 8001d00:	dc05      	bgt.n	8001d0e <__swbuf_r+0x56>
 8001d02:	0021      	movs	r1, r4
 8001d04:	0030      	movs	r0, r6
 8001d06:	f7ff ff4f 	bl	8001ba8 <_fflush_r>
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	d1ed      	bne.n	8001cea <__swbuf_r+0x32>
 8001d0e:	68a3      	ldr	r3, [r4, #8]
 8001d10:	3001      	adds	r0, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	60a3      	str	r3, [r4, #8]
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	6022      	str	r2, [r4, #0]
 8001d1c:	701f      	strb	r7, [r3, #0]
 8001d1e:	6963      	ldr	r3, [r4, #20]
 8001d20:	4283      	cmp	r3, r0
 8001d22:	d004      	beq.n	8001d2e <__swbuf_r+0x76>
 8001d24:	89a3      	ldrh	r3, [r4, #12]
 8001d26:	07db      	lsls	r3, r3, #31
 8001d28:	d5e1      	bpl.n	8001cee <__swbuf_r+0x36>
 8001d2a:	2d0a      	cmp	r5, #10
 8001d2c:	d1df      	bne.n	8001cee <__swbuf_r+0x36>
 8001d2e:	0021      	movs	r1, r4
 8001d30:	0030      	movs	r0, r6
 8001d32:	f7ff ff39 	bl	8001ba8 <_fflush_r>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d0d9      	beq.n	8001cee <__swbuf_r+0x36>
 8001d3a:	e7d6      	b.n	8001cea <__swbuf_r+0x32>

08001d3c <__swsetup_r>:
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <__swsetup_r+0xb8>)
 8001d3e:	b570      	push	{r4, r5, r6, lr}
 8001d40:	0005      	movs	r5, r0
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	000c      	movs	r4, r1
 8001d46:	2800      	cmp	r0, #0
 8001d48:	d004      	beq.n	8001d54 <__swsetup_r+0x18>
 8001d4a:	6a03      	ldr	r3, [r0, #32]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <__swsetup_r+0x18>
 8001d50:	f7ff fa68 	bl	8001224 <__sinit>
 8001d54:	230c      	movs	r3, #12
 8001d56:	5ee2      	ldrsh	r2, [r4, r3]
 8001d58:	0713      	lsls	r3, r2, #28
 8001d5a:	d423      	bmi.n	8001da4 <__swsetup_r+0x68>
 8001d5c:	06d3      	lsls	r3, r2, #27
 8001d5e:	d407      	bmi.n	8001d70 <__swsetup_r+0x34>
 8001d60:	2309      	movs	r3, #9
 8001d62:	602b      	str	r3, [r5, #0]
 8001d64:	2340      	movs	r3, #64	@ 0x40
 8001d66:	2001      	movs	r0, #1
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	81a3      	strh	r3, [r4, #12]
 8001d6c:	4240      	negs	r0, r0
 8001d6e:	e03a      	b.n	8001de6 <__swsetup_r+0xaa>
 8001d70:	0752      	lsls	r2, r2, #29
 8001d72:	d513      	bpl.n	8001d9c <__swsetup_r+0x60>
 8001d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d76:	2900      	cmp	r1, #0
 8001d78:	d008      	beq.n	8001d8c <__swsetup_r+0x50>
 8001d7a:	0023      	movs	r3, r4
 8001d7c:	3344      	adds	r3, #68	@ 0x44
 8001d7e:	4299      	cmp	r1, r3
 8001d80:	d002      	beq.n	8001d88 <__swsetup_r+0x4c>
 8001d82:	0028      	movs	r0, r5
 8001d84:	f000 f934 	bl	8001ff0 <_free_r>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d8c:	2224      	movs	r2, #36	@ 0x24
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	4393      	bics	r3, r2
 8001d92:	81a3      	strh	r3, [r4, #12]
 8001d94:	2300      	movs	r3, #0
 8001d96:	6063      	str	r3, [r4, #4]
 8001d98:	6923      	ldr	r3, [r4, #16]
 8001d9a:	6023      	str	r3, [r4, #0]
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	89a2      	ldrh	r2, [r4, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	81a3      	strh	r3, [r4, #12]
 8001da4:	6923      	ldr	r3, [r4, #16]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10b      	bne.n	8001dc2 <__swsetup_r+0x86>
 8001daa:	21a0      	movs	r1, #160	@ 0xa0
 8001dac:	2280      	movs	r2, #128	@ 0x80
 8001dae:	89a3      	ldrh	r3, [r4, #12]
 8001db0:	0089      	lsls	r1, r1, #2
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	400b      	ands	r3, r1
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d003      	beq.n	8001dc2 <__swsetup_r+0x86>
 8001dba:	0021      	movs	r1, r4
 8001dbc:	0028      	movs	r0, r5
 8001dbe:	f000 f845 	bl	8001e4c <__smakebuf_r>
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	5ee2      	ldrsh	r2, [r4, r3]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	0013      	movs	r3, r2
 8001dca:	400b      	ands	r3, r1
 8001dcc:	420a      	tst	r2, r1
 8001dce:	d00b      	beq.n	8001de8 <__swsetup_r+0xac>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60a3      	str	r3, [r4, #8]
 8001dd4:	6963      	ldr	r3, [r4, #20]
 8001dd6:	425b      	negs	r3, r3
 8001dd8:	61a3      	str	r3, [r4, #24]
 8001dda:	2000      	movs	r0, #0
 8001ddc:	6923      	ldr	r3, [r4, #16]
 8001dde:	4283      	cmp	r3, r0
 8001de0:	d101      	bne.n	8001de6 <__swsetup_r+0xaa>
 8001de2:	0613      	lsls	r3, r2, #24
 8001de4:	d4be      	bmi.n	8001d64 <__swsetup_r+0x28>
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
 8001de8:	0791      	lsls	r1, r2, #30
 8001dea:	d400      	bmi.n	8001dee <__swsetup_r+0xb2>
 8001dec:	6963      	ldr	r3, [r4, #20]
 8001dee:	60a3      	str	r3, [r4, #8]
 8001df0:	e7f3      	b.n	8001dda <__swsetup_r+0x9e>
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	20000028 	.word	0x20000028

08001df8 <__swhatbuf_r>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	000e      	movs	r6, r1
 8001dfc:	001d      	movs	r5, r3
 8001dfe:	230e      	movs	r3, #14
 8001e00:	5ec9      	ldrsh	r1, [r1, r3]
 8001e02:	0014      	movs	r4, r2
 8001e04:	b096      	sub	sp, #88	@ 0x58
 8001e06:	2900      	cmp	r1, #0
 8001e08:	da0c      	bge.n	8001e24 <__swhatbuf_r+0x2c>
 8001e0a:	89b2      	ldrh	r2, [r6, #12]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	0011      	movs	r1, r2
 8001e10:	4019      	ands	r1, r3
 8001e12:	421a      	tst	r2, r3
 8001e14:	d114      	bne.n	8001e40 <__swhatbuf_r+0x48>
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	6029      	str	r1, [r5, #0]
 8001e1e:	6023      	str	r3, [r4, #0]
 8001e20:	b016      	add	sp, #88	@ 0x58
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
 8001e24:	466a      	mov	r2, sp
 8001e26:	f000 f865 	bl	8001ef4 <_fstat_r>
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	dbed      	blt.n	8001e0a <__swhatbuf_r+0x12>
 8001e2e:	23f0      	movs	r3, #240	@ 0xf0
 8001e30:	9901      	ldr	r1, [sp, #4]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	4019      	ands	r1, r3
 8001e36:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <__swhatbuf_r+0x50>)
 8001e38:	18c9      	adds	r1, r1, r3
 8001e3a:	424b      	negs	r3, r1
 8001e3c:	4159      	adcs	r1, r3
 8001e3e:	e7ea      	b.n	8001e16 <__swhatbuf_r+0x1e>
 8001e40:	2100      	movs	r1, #0
 8001e42:	2340      	movs	r3, #64	@ 0x40
 8001e44:	e7e9      	b.n	8001e1a <__swhatbuf_r+0x22>
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	ffffe000 	.word	0xffffe000

08001e4c <__smakebuf_r>:
 8001e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4e:	2602      	movs	r6, #2
 8001e50:	898b      	ldrh	r3, [r1, #12]
 8001e52:	0005      	movs	r5, r0
 8001e54:	000c      	movs	r4, r1
 8001e56:	b085      	sub	sp, #20
 8001e58:	4233      	tst	r3, r6
 8001e5a:	d007      	beq.n	8001e6c <__smakebuf_r+0x20>
 8001e5c:	0023      	movs	r3, r4
 8001e5e:	3347      	adds	r3, #71	@ 0x47
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	6123      	str	r3, [r4, #16]
 8001e64:	2301      	movs	r3, #1
 8001e66:	6163      	str	r3, [r4, #20]
 8001e68:	b005      	add	sp, #20
 8001e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e6c:	ab03      	add	r3, sp, #12
 8001e6e:	aa02      	add	r2, sp, #8
 8001e70:	f7ff ffc2 	bl	8001df8 <__swhatbuf_r>
 8001e74:	9f02      	ldr	r7, [sp, #8]
 8001e76:	9001      	str	r0, [sp, #4]
 8001e78:	0039      	movs	r1, r7
 8001e7a:	0028      	movs	r0, r5
 8001e7c:	f7ff fc10 	bl	80016a0 <_malloc_r>
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d108      	bne.n	8001e96 <__smakebuf_r+0x4a>
 8001e84:	220c      	movs	r2, #12
 8001e86:	5ea3      	ldrsh	r3, [r4, r2]
 8001e88:	059a      	lsls	r2, r3, #22
 8001e8a:	d4ed      	bmi.n	8001e68 <__smakebuf_r+0x1c>
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	4393      	bics	r3, r2
 8001e90:	431e      	orrs	r6, r3
 8001e92:	81a6      	strh	r6, [r4, #12]
 8001e94:	e7e2      	b.n	8001e5c <__smakebuf_r+0x10>
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	89a2      	ldrh	r2, [r4, #12]
 8001e9a:	6020      	str	r0, [r4, #0]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	81a3      	strh	r3, [r4, #12]
 8001ea0:	9b03      	ldr	r3, [sp, #12]
 8001ea2:	6120      	str	r0, [r4, #16]
 8001ea4:	6167      	str	r7, [r4, #20]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <__smakebuf_r+0x78>
 8001eaa:	0028      	movs	r0, r5
 8001eac:	230e      	movs	r3, #14
 8001eae:	5ee1      	ldrsh	r1, [r4, r3]
 8001eb0:	f000 f832 	bl	8001f18 <_isatty_r>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d005      	beq.n	8001ec4 <__smakebuf_r+0x78>
 8001eb8:	2303      	movs	r3, #3
 8001eba:	89a2      	ldrh	r2, [r4, #12]
 8001ebc:	439a      	bics	r2, r3
 8001ebe:	3b02      	subs	r3, #2
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	81a3      	strh	r3, [r4, #12]
 8001ec4:	89a3      	ldrh	r3, [r4, #12]
 8001ec6:	9a01      	ldr	r2, [sp, #4]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	81a3      	strh	r3, [r4, #12]
 8001ecc:	e7cc      	b.n	8001e68 <__smakebuf_r+0x1c>
	...

08001ed0 <_close_r>:
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	b570      	push	{r4, r5, r6, lr}
 8001ed4:	4d06      	ldr	r5, [pc, #24]	@ (8001ef0 <_close_r+0x20>)
 8001ed6:	0004      	movs	r4, r0
 8001ed8:	0008      	movs	r0, r1
 8001eda:	602b      	str	r3, [r5, #0]
 8001edc:	f7fe fe5f 	bl	8000b9e <_close>
 8001ee0:	1c43      	adds	r3, r0, #1
 8001ee2:	d103      	bne.n	8001eec <_close_r+0x1c>
 8001ee4:	682b      	ldr	r3, [r5, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d000      	beq.n	8001eec <_close_r+0x1c>
 8001eea:	6023      	str	r3, [r4, #0]
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	20000240 	.word	0x20000240

08001ef4 <_fstat_r>:
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	b570      	push	{r4, r5, r6, lr}
 8001ef8:	4d06      	ldr	r5, [pc, #24]	@ (8001f14 <_fstat_r+0x20>)
 8001efa:	0004      	movs	r4, r0
 8001efc:	0008      	movs	r0, r1
 8001efe:	0011      	movs	r1, r2
 8001f00:	602b      	str	r3, [r5, #0]
 8001f02:	f7fe fe56 	bl	8000bb2 <_fstat>
 8001f06:	1c43      	adds	r3, r0, #1
 8001f08:	d103      	bne.n	8001f12 <_fstat_r+0x1e>
 8001f0a:	682b      	ldr	r3, [r5, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d000      	beq.n	8001f12 <_fstat_r+0x1e>
 8001f10:	6023      	str	r3, [r4, #0]
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
 8001f14:	20000240 	.word	0x20000240

08001f18 <_isatty_r>:
 8001f18:	2300      	movs	r3, #0
 8001f1a:	b570      	push	{r4, r5, r6, lr}
 8001f1c:	4d06      	ldr	r5, [pc, #24]	@ (8001f38 <_isatty_r+0x20>)
 8001f1e:	0004      	movs	r4, r0
 8001f20:	0008      	movs	r0, r1
 8001f22:	602b      	str	r3, [r5, #0]
 8001f24:	f7fe fe53 	bl	8000bce <_isatty>
 8001f28:	1c43      	adds	r3, r0, #1
 8001f2a:	d103      	bne.n	8001f34 <_isatty_r+0x1c>
 8001f2c:	682b      	ldr	r3, [r5, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d000      	beq.n	8001f34 <_isatty_r+0x1c>
 8001f32:	6023      	str	r3, [r4, #0]
 8001f34:	bd70      	pop	{r4, r5, r6, pc}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	20000240 	.word	0x20000240

08001f3c <_lseek_r>:
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	0004      	movs	r4, r0
 8001f40:	0008      	movs	r0, r1
 8001f42:	0011      	movs	r1, r2
 8001f44:	001a      	movs	r2, r3
 8001f46:	2300      	movs	r3, #0
 8001f48:	4d05      	ldr	r5, [pc, #20]	@ (8001f60 <_lseek_r+0x24>)
 8001f4a:	602b      	str	r3, [r5, #0]
 8001f4c:	f7fe fe48 	bl	8000be0 <_lseek>
 8001f50:	1c43      	adds	r3, r0, #1
 8001f52:	d103      	bne.n	8001f5c <_lseek_r+0x20>
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d000      	beq.n	8001f5c <_lseek_r+0x20>
 8001f5a:	6023      	str	r3, [r4, #0]
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	20000240 	.word	0x20000240

08001f64 <_read_r>:
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	0004      	movs	r4, r0
 8001f68:	0008      	movs	r0, r1
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	2300      	movs	r3, #0
 8001f70:	4d05      	ldr	r5, [pc, #20]	@ (8001f88 <_read_r+0x24>)
 8001f72:	602b      	str	r3, [r5, #0]
 8001f74:	f7fe fdda 	bl	8000b2c <_read>
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	d103      	bne.n	8001f84 <_read_r+0x20>
 8001f7c:	682b      	ldr	r3, [r5, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d000      	beq.n	8001f84 <_read_r+0x20>
 8001f82:	6023      	str	r3, [r4, #0]
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	20000240 	.word	0x20000240

08001f8c <_sbrk_r>:
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	b570      	push	{r4, r5, r6, lr}
 8001f90:	4d06      	ldr	r5, [pc, #24]	@ (8001fac <_sbrk_r+0x20>)
 8001f92:	0004      	movs	r4, r0
 8001f94:	0008      	movs	r0, r1
 8001f96:	602b      	str	r3, [r5, #0]
 8001f98:	f7fe fe2e 	bl	8000bf8 <_sbrk>
 8001f9c:	1c43      	adds	r3, r0, #1
 8001f9e:	d103      	bne.n	8001fa8 <_sbrk_r+0x1c>
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d000      	beq.n	8001fa8 <_sbrk_r+0x1c>
 8001fa6:	6023      	str	r3, [r4, #0]
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	20000240 	.word	0x20000240

08001fb0 <_write_r>:
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	0004      	movs	r4, r0
 8001fb4:	0008      	movs	r0, r1
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	001a      	movs	r2, r3
 8001fba:	2300      	movs	r3, #0
 8001fbc:	4d05      	ldr	r5, [pc, #20]	@ (8001fd4 <_write_r+0x24>)
 8001fbe:	602b      	str	r3, [r5, #0]
 8001fc0:	f7fe fdd1 	bl	8000b66 <_write>
 8001fc4:	1c43      	adds	r3, r0, #1
 8001fc6:	d103      	bne.n	8001fd0 <_write_r+0x20>
 8001fc8:	682b      	ldr	r3, [r5, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d000      	beq.n	8001fd0 <_write_r+0x20>
 8001fce:	6023      	str	r3, [r4, #0]
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	20000240 	.word	0x20000240

08001fd8 <memchr>:
 8001fd8:	b2c9      	uxtb	r1, r1
 8001fda:	1882      	adds	r2, r0, r2
 8001fdc:	4290      	cmp	r0, r2
 8001fde:	d101      	bne.n	8001fe4 <memchr+0xc>
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	4770      	bx	lr
 8001fe4:	7803      	ldrb	r3, [r0, #0]
 8001fe6:	428b      	cmp	r3, r1
 8001fe8:	d0fb      	beq.n	8001fe2 <memchr+0xa>
 8001fea:	3001      	adds	r0, #1
 8001fec:	e7f6      	b.n	8001fdc <memchr+0x4>
	...

08001ff0 <_free_r>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	0005      	movs	r5, r0
 8001ff4:	1e0c      	subs	r4, r1, #0
 8001ff6:	d010      	beq.n	800201a <_free_r+0x2a>
 8001ff8:	3c04      	subs	r4, #4
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da00      	bge.n	8002002 <_free_r+0x12>
 8002000:	18e4      	adds	r4, r4, r3
 8002002:	0028      	movs	r0, r5
 8002004:	f7ff fdfc 	bl	8001c00 <__malloc_lock>
 8002008:	4a1d      	ldr	r2, [pc, #116]	@ (8002080 <_free_r+0x90>)
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <_free_r+0x2c>
 8002010:	6063      	str	r3, [r4, #4]
 8002012:	6014      	str	r4, [r2, #0]
 8002014:	0028      	movs	r0, r5
 8002016:	f7ff fdfb 	bl	8001c10 <__malloc_unlock>
 800201a:	bd70      	pop	{r4, r5, r6, pc}
 800201c:	42a3      	cmp	r3, r4
 800201e:	d908      	bls.n	8002032 <_free_r+0x42>
 8002020:	6820      	ldr	r0, [r4, #0]
 8002022:	1821      	adds	r1, r4, r0
 8002024:	428b      	cmp	r3, r1
 8002026:	d1f3      	bne.n	8002010 <_free_r+0x20>
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	1809      	adds	r1, r1, r0
 800202e:	6021      	str	r1, [r4, #0]
 8002030:	e7ee      	b.n	8002010 <_free_r+0x20>
 8002032:	001a      	movs	r2, r3
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <_free_r+0x4e>
 800203a:	42a3      	cmp	r3, r4
 800203c:	d9f9      	bls.n	8002032 <_free_r+0x42>
 800203e:	6811      	ldr	r1, [r2, #0]
 8002040:	1850      	adds	r0, r2, r1
 8002042:	42a0      	cmp	r0, r4
 8002044:	d10b      	bne.n	800205e <_free_r+0x6e>
 8002046:	6820      	ldr	r0, [r4, #0]
 8002048:	1809      	adds	r1, r1, r0
 800204a:	1850      	adds	r0, r2, r1
 800204c:	6011      	str	r1, [r2, #0]
 800204e:	4283      	cmp	r3, r0
 8002050:	d1e0      	bne.n	8002014 <_free_r+0x24>
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	1841      	adds	r1, r0, r1
 8002058:	6011      	str	r1, [r2, #0]
 800205a:	6053      	str	r3, [r2, #4]
 800205c:	e7da      	b.n	8002014 <_free_r+0x24>
 800205e:	42a0      	cmp	r0, r4
 8002060:	d902      	bls.n	8002068 <_free_r+0x78>
 8002062:	230c      	movs	r3, #12
 8002064:	602b      	str	r3, [r5, #0]
 8002066:	e7d5      	b.n	8002014 <_free_r+0x24>
 8002068:	6820      	ldr	r0, [r4, #0]
 800206a:	1821      	adds	r1, r4, r0
 800206c:	428b      	cmp	r3, r1
 800206e:	d103      	bne.n	8002078 <_free_r+0x88>
 8002070:	6819      	ldr	r1, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	1809      	adds	r1, r1, r0
 8002076:	6021      	str	r1, [r4, #0]
 8002078:	6063      	str	r3, [r4, #4]
 800207a:	6054      	str	r4, [r2, #4]
 800207c:	e7ca      	b.n	8002014 <_free_r+0x24>
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	2000023c 	.word	0x2000023c

08002084 <_init>:
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208a:	bc08      	pop	{r3}
 800208c:	469e      	mov	lr, r3
 800208e:	4770      	bx	lr

08002090 <_fini>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002096:	bc08      	pop	{r3}
 8002098:	469e      	mov	lr, r3
 800209a:	4770      	bx	lr
